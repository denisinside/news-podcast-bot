import { ConfigService, QueueService } from "../../../src/config";
import { QueueManager } from "../../../src/infrastructure/managers/QueueManager";
import { PodcastJobData } from "../../../src/workers/PodcastQueueWorker";
import { PostJobData } from "../../../src/workers/PostQueueWorker";

async function testQueue() {
    console.log('üöÄ Starting queue tests...\n');

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
    const configService = new ConfigService();
    const queueService = new QueueService(configService);
    const queueManager = new QueueManager(queueService, configService);

    await queueManager.initialize();

    try {
        // ===== –¢–ï–°–¢ 1: –ù–µ–≥–∞–π–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–¥–∫–∞—Å—Ç—É =====

        const podcastData: PodcastJobData = {
            podcastId: 'podcast-001',
            title: 'Test Podcast Episode',
            content: 'This is a test podcast content about AI and technology.',
            userId: 'user-123',
            publishImmediately: true,
        };

        const job1 = await queueManager.addPodcast(podcastData);
        console.log(`‚úÖ Added podcast job: ${job1.id}\n`);

        // –ß–µ–∫–∞—î–º–æ 3 —Å–µ–∫—É–Ω–¥–∏
        await delay(3000);

        // ===== –¢–ï–°–¢ 2: –í—ñ–¥–∫–ª–∞–¥–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–¥–∫–∞—Å—Ç—É =====
        console.log('üìù Test 2: Scheduled podcast generation');
        const scheduledDate = new Date(Date.now() + 10000); // +10 —Å–µ–∫—É–Ω–¥
        const scheduledPodcast: PodcastJobData = {
            podcastId: 'podcast-002',
            title: 'Scheduled Podcast',
            content: 'This podcast will be generated in 10 seconds.',
            userId: 'user-123',
            publishImmediately: false,
        };

        const job2 = await queueManager.schedulePodcast(scheduledPodcast, scheduledDate);
        console.log(`‚úÖ Scheduled podcast job: ${job2.id} at ${scheduledDate.toISOString()}\n`);

        // ===== –¢–ï–°–¢ 3: –ù–µ–≥–∞–π–Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –ø–æ—Å—Ç—É =====
        console.log('üìù Test 3: Immediate post publishing');
        const postData: PostJobData = {
            postId: 'post-001',
            title: 'Breaking News',
            content: 'This is an important news update!',
            userId: 'user-123',
            channelId: 'channel-456',
        };

        const queue = queueService.getQueue('post-publishing');
        const job3 = await queue.add('publish-post', postData);
        console.log(`‚úÖ Added post job: ${job3.id}\n`);

        // –ß–µ–∫–∞—î–º–æ 3 —Å–µ–∫—É–Ω–¥–∏
        await delay(3000);

        // ===== –¢–ï–°–¢ 4: –í—ñ–¥–∫–ª–∞–¥–µ–Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –ø–æ—Å—Ç—É =====
        console.log('üìù Test 4: Scheduled post publishing');
        const scheduledPostDate = new Date(Date.now() + 15000); // +15 —Å–µ–∫—É–Ω–¥
        const scheduledPost: PostJobData = {
            postId: 'post-002',
            title: 'Scheduled Announcement',
            content: 'This post will be published in 15 seconds.',
            userId: 'user-123',
            channelId: 'channel-456',
        };

        const job4 = await queueManager.schedulePost(scheduledPost, scheduledPostDate);
        console.log(`‚úÖ Scheduled post job: ${job4.id} at ${scheduledPostDate.toISOString()}\n`);

        // ===== –¢–ï–°–¢ 5: –†–µ–≥—É–ª—è—Ä–Ω–∏–π –ø–æ—Å—Ç (cron) =====
        console.log('üìù Test 5: Recurring post with cron');
        const recurringPost: PostJobData = {
            postId: 'post-recurring',
            title: 'Daily Digest',
            content: 'Daily news digest content',
            userId: 'user-123',
            channelId: 'channel-456',
            recurring: true,
        };

        // –ö–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ: '0 9 * * *' - —â–æ–¥–Ω—è –æ 9:00)
        const cronPattern = '*/1 * * * *';
        const job5 = await queueManager.addRecurringPost(recurringPost, cronPattern);
        console.log(`‚úÖ Added recurring post job: ${job5.id} with pattern: ${cronPattern}\n`);

        // ===== –¢–ï–°–¢ 6: –ü–æ—Å—Ç –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º =====
        console.log('üìù Test 6: Interval-based post');
        const intervalPost: PostJobData = {
            postId: 'post-interval',
            title: 'Hourly Update',
            content: 'This post repeats every 30 seconds (test interval)',
            userId: 'user-123',
            channelId: 'channel-456',
            recurring: true,
        };

        const intervalMs = 30000; // 30 —Å–µ–∫—É–Ω–¥ (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
        const job6 = await queueManager.addIntervalPost(intervalPost, intervalMs);
        console.log(`‚úÖ Added interval post job: ${job6.id} every ${intervalMs}ms\n`);

        // ===== –¢–ï–°–¢ 7: –ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å =====
        console.log('Test 7: View scheduled jobs');
        await delay(2000);

        const scheduledPosts = await queueManager.getScheduledPosts();
        console.log(`Scheduled posts count: ${scheduledPosts.length}`);
        scheduledPosts.forEach((job, index) => {
            console.log(`   ${index + 1}. Job: ${job.key}, Pattern: ${job.pattern || job.every}`);
        });
        console.log();

        // ===== –û–ß–Ü–ö–£–í–ê–ù–ù–Ø –í–ò–ö–û–ù–ê–ù–ù–Ø =====
        console.log(' Waiting for scheduled jobs to execute...');
        console.log('(Waiting 20 seconds to see scheduled jobs run)\n');
        await delay(20000);

        // ===== –¢–ï–°–¢ 8: –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è =====
        console.log(' Test 8: Remove recurring job');
        const jobsToRemove = await queueManager.getScheduledPosts();
        if (jobsToRemove.length > 0) {
            const jobKey = jobsToRemove[0].key;
            await queueManager.removeScheduledPost(jobKey);
            console.log(` Removed recurring job: ${jobKey}\n`);
        }

        // ===== –¢–ï–°–¢ 9: –ü–∞—É–∑–∞ —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–æ—Ä–∫–µ—Ä—ñ–≤ =====
        console.log(' Test 9: Pause and resume workers');
        await queueManager.pauseAll();
        console.log('Workers paused\n');

        await delay(3000);

        await queueManager.resumeAll();
        console.log('Workers resumed\n');

        // –ß–µ–∫–∞—î–º–æ —â–µ —Ç—Ä–æ—Ö–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–¥–∞—á
        console.log('Waiting for final jobs to complete...\n');
        await delay(10000);

        console.log('All tests completed!\n');

    } catch (error) {
        console.error('Error during tests:', error);
    } finally {
        // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        console.log('Cleaning up...');
        await queueManager.shutdown();
        console.log('Cleanup completed');
        process.exit(0);
    }
}

function delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
process.on('unhandledRejection', (error) => {
    console.error('Unhandled rejection:', error);
    process.exit(1);
});

process.on('SIGINT', async () => {
    console.log('\nReceived SIGINT, shutting down gracefully...');
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
testQueue();