import { IMessageTemplateService } from "../interfaces/IMessageTemplateService";
import { IArticle } from "@/models";

export class MessageTemplateService implements IMessageTemplateService {
    
    formatNewsNotification(article: IArticle, topicName: string): { text: string; imageUrl?: string; url?: string } {
        const truncatedContent = this.truncateText(article.content, 1000);
        
        const message = `üîπ *${article.title}*

üìù ${truncatedContent}

üì∞ ${topicName}
üìÖ ${this.formatDate(article.publicationDate)}`;

        return {
            text: this.truncateText(message, 4000),
            imageUrl: article.url,
            url: article.source
        };
    }

    formatPodcastNotification(podcastUrl: string, topics: string[], duration?: string): string {
        const topicsList = topics.map(topic => `‚Ä¢ ${topic}`).join('\n');
        const durationText = duration ? `\n‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${duration}` : '';
        
        const message = `üéôÔ∏è *–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–¥–∫–∞—Å—Ç –≥–æ—Ç–æ–≤–∏–π!*

üìã *–¢–µ–º–∏ –≤ –ø–æ–¥–∫–∞—Å—Ç—ñ:*
${topicsList}${durationText}`;

        return this.truncateText(message, 4000);
    }

    formatErrorNotification(error: string): string {
        return `‚ùå *–ü–æ–º–∏–ª–∫–∞*

${error}

–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —è–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è.`;
    }

    truncateText(text: string, maxLength: number = 4000): string {
        if (text.length <= maxLength) {
            return text;
        }
        
        // Try to truncate at sentence boundary
        const truncated = text.substring(0, maxLength - 3);
        const lastSentenceEnd = Math.max(
            truncated.lastIndexOf('.'),
            truncated.lastIndexOf('!'),
            truncated.lastIndexOf('?')
        );
        
        if (lastSentenceEnd > maxLength * 0.8) {
            return truncated.substring(0, lastSentenceEnd + 1) + '...';
        }
        
        return truncated + '...';
    }


    private formatDate(date: Date): string {
        return date.toLocaleDateString('uk-UA', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }
}
