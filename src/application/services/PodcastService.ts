import { IPodcast, PodcastStatus } from '@models/Podcast';
import { IArticle } from '@models/Article';
import { ISubscription } from '@models/Subscription';
import { IPodcastRepository } from '@infrastructure/repositories/IPodcastRepository';
import { IArticleRepository } from '@infrastructure/repositories/IArticleRepository';
import { ISubscriptionRepository } from '@infrastructure/repositories/ISubscriptionRepository';
import { IFileStorageClient } from '@infrastructure/clients/IFileStorageClient';
import { Types } from 'mongoose';
import { IGeminiClient } from '@infrastructure/clients/IGeminiClient';
import ffmpeg from 'fluent-ffmpeg';
import * as ffmpegPath from '@ffmpeg-installer/ffmpeg';
import { Readable, Writable } from 'stream';
import { INotificationService } from '../interfaces/INotificationService';

ffmpeg.setFfmpegPath(ffmpegPath.path);

export class PodcastService {
    private podcastRepository: IPodcastRepository;
    private articleRepository: IArticleRepository;
    private subscriptionRepository: ISubscriptionRepository;
    private storageClient: IFileStorageClient;
    private geminiClient: IGeminiClient;
    private notificationService?: INotificationService;

    constructor(
        podcastRepository: IPodcastRepository,
        articleRepository: IArticleRepository,
        subscriptionRepository: ISubscriptionRepository,
        storageClient: IFileStorageClient,
        geminiClient: IGeminiClient
    ) {
        this.podcastRepository = podcastRepository;
        this.articleRepository = articleRepository;
        this.subscriptionRepository = subscriptionRepository;
        this.storageClient = storageClient;
        this.geminiClient = geminiClient;
    }

    setNotificationService(notificationService: INotificationService): void {
        this.notificationService = notificationService;
    }

    async generateForUser(userId: string): Promise<string> {
        try {            
            const subscriptions = await this.subscriptionRepository.findByUserId(userId);
            
            if (subscriptions.length === 0) {
                console.error(`‚ùå [PodcastService] User ${userId} has no subscriptions`);
                throw new Error('User has no subscriptions');
            }

            const articles = await this.getArticlesForPodcast(subscriptions);

            if (articles.length === 0) {
                console.error(`‚ùå [PodcastService] No recent articles found for user ${userId} subscriptions`);
                throw new Error('No recent articles found for user subscriptions');
            }

            const podcast = await this.podcastRepository.create({
                userId,
                articles: articles.map(article => article._id as Types.ObjectId)
            });

            await this.podcastRepository.update(podcast._id as Types.ObjectId, {
                status: PodcastStatus.GENERATING
            });

            const scriptJson = await this.generatePodcastScript(articles);
            
            const scriptData = JSON.parse(scriptJson);
            const { speaker1, speaker2, text } = scriptData;

            const audioBuffer = await this.geminiClient.generateAudio(speaker1, speaker2, text);

            const mp3Buffer = await this.convertToMp3(audioBuffer);

            const fileName = this.generatePodcastFileName(subscriptions);
            
            const fileUrl = await this.storageClient.upload(mp3Buffer, fileName);

            await this.podcastRepository.update(podcast._id as any, {
                status: 'READY',
                fileUrl
            });

            // Send podcast notification to user
            if (this.notificationService) {
                try {
                    // Get topic names for the podcast
                    const validSubscriptions = subscriptions.filter(sub => sub.topicId !== null);
                    const topicNames = validSubscriptions.map(sub => (sub.topicId as any).name || '–ù–µ–≤—ñ–¥–æ–º–∞ —Ç–µ–º–∞');
                    
                    const result = await this.notificationService.sendPodcastToUser(userId, fileUrl, topicNames);
                } catch (notificationError) {
                    console.error(`‚ùå [PodcastService] Error sending podcast notification to user ${userId}:`, notificationError);
                }
            } else {
                console.warn(`‚ö†Ô∏è [PodcastService] No notification service available for user ${userId}`);
            }
            
            console.log(`üéâ [PodcastService] Podcast generation completed successfully for user ${userId}`);
            return fileUrl;
        } catch (error) {
            console.error(`‚ùå [PodcastService] Error generating podcast for user ${userId}:`, error);
            throw error;
        }
    }

    private convertToMp3(inputBuffer: Buffer): Promise<Buffer> {
        return new Promise((resolve, reject) => {
            
            if (!inputBuffer || inputBuffer.length === 0) {
                console.error(`‚ùå [PodcastService] Input buffer is empty or invalid`);
                reject(new Error('Input buffer is empty or invalid'));
                return;
            }

            const outputBuffers: Buffer[] = [];

            const readableStream = new Readable();
            readableStream._read = () => {};
            readableStream.push(inputBuffer);
            readableStream.push(null);

            const writableStream = new Writable({
                write(chunk, encoding, callback) {
                    outputBuffers.push(chunk);
                    callback();
                }
            });

            ffmpeg(readableStream)
                .inputFormat('s16le')
                .inputOptions([
                    '-ar 24000',
                    '-ac 1'
                ])
                .audioCodec('libmp3lame')
                .audioBitrate('128k')
                .toFormat('mp3')
                .on('error', (err) => {
                    console.error(`‚ùå [PodcastService] FFmpeg conversion error:`, err);
                    reject(new Error(`FFmpeg error: ${err.message}`));
                })
                .on('end', () => {
                    const outputBuffer = Buffer.concat(outputBuffers);
                    resolve(outputBuffer);
                })
                .pipe(writableStream, { end: true });
        });
    }

    private async getArticlesForPodcast(subscriptions: ISubscription[]): Promise<IArticle[]> {
        try {
            // Filter out subscriptions with deleted topics
            const validSubscriptions = subscriptions.filter(sub => sub.topicId !== null);
            
            const topicIds = validSubscriptions.map(sub => {
                // Handle populated topicId (object) vs non-populated (ObjectId)
                if (sub.topicId && typeof sub.topicId === 'object' && (sub.topicId as any)._id) {
                    return String((sub.topicId as any)._id);
                }
                return String(sub.topicId);
            }).filter(id => id !== 'null');
            
            // Get articles from the last 24 hours
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            
            const recentArticles = await this.articleRepository.findByDateRange(yesterday, new Date());
            
            // Filter articles by topic IDs and sort by publication date
            const filteredArticles = recentArticles
                .filter(article => {
                    const articleTopicId = (article as any).topicId?._id || (article as any).topicId;
                    const matches = topicIds.includes(String(articleTopicId));

                    return matches;
                })
                .sort((a, b) => new Date(b.publicationDate).getTime() - new Date(a.publicationDate).getTime());
            
                    
            // Distribute articles evenly across topics (max 10 articles total)
            const distributedArticles = this.distributeArticlesAcrossTopics(filteredArticles, validSubscriptions, 10);
            
            return distributedArticles;
        } catch (error) {
            console.error(`‚ùå [PodcastService] Error getting articles for podcast:`, error);
            throw error;
        }
    }

    private distributeArticlesAcrossTopics(articles: IArticle[], subscriptions: ISubscription[], maxArticles: number): IArticle[] {
        if (articles.length === 0) {
            return [];
        }

        // Group articles by topic
        const articlesByTopic = new Map<string, IArticle[]>();
        
        articles.forEach(article => {
            const articleTopicId = String((article as any).topicId?._id || (article as any).topicId);
            if (!articlesByTopic.has(articleTopicId)) {
                articlesByTopic.set(articleTopicId, []);
            }
            articlesByTopic.get(articleTopicId)!.push(article);
        });

        const topicCount = subscriptions.length;
        const articlesPerTopic = Math.floor(maxArticles / topicCount);
        const remainingArticles = maxArticles % topicCount;

        const selectedArticles: IArticle[] = [];
        const topicIds = subscriptions.map(sub => {
            if (sub.topicId && typeof sub.topicId === 'object' && (sub.topicId as any)._id) {
                return String((sub.topicId as any)._id);
            }
            return String(sub.topicId);
        });

        // Distribute articles evenly
        topicIds.forEach((topicId, index) => {
            const topicArticles = articlesByTopic.get(topicId) || [];
            let articlesToTake = articlesPerTopic;
            
            // Give extra articles to first few topics if there are remaining articles
            if (index < remainingArticles) {
                articlesToTake += 1;
            }

            const selectedFromTopic = topicArticles.slice(0, articlesToTake);
            selectedArticles.push(...selectedFromTopic);
        });

        // If we have fewer articles than maxArticles, try to fill with random articles from any topic
        if (selectedArticles.length < maxArticles) {
            const remainingSlots = maxArticles - selectedArticles.length;
            const allRemainingArticles = articles.filter(article => 
                !selectedArticles.some(selected => selected._id === article._id)
            );
            
            // Randomly select remaining articles
            const shuffled = allRemainingArticles.sort(() => Math.random() - 0.5);
            selectedArticles.push(...shuffled.slice(0, remainingSlots));
                    }

        // Sort final selection by publication date (newest first)
        const finalArticles = selectedArticles
            .sort((a, b) => new Date(b.publicationDate).getTime() - new Date(a.publicationDate).getTime())
            .slice(0, maxArticles);

        return finalArticles;
    }

    private async generatePodcastScript(articles: IArticle[]): Promise<string> {
        try {
            // Group articles by topic for better organization
            const articlesByTopic = new Map<string, IArticle[]>();
            
            articles.forEach(article => {
                const topicName = (article as any).topicId?.name || '–ù–µ–≤—ñ–¥–æ–º–∞ —Ç–µ–º–∞';
                if (!articlesByTopic.has(topicName)) {
                    articlesByTopic.set(topicName, []);
                }
                articlesByTopic.get(topicName)!.push(article);
            });

            // Create organized text by topics
            const organizedText = Array.from(articlesByTopic.entries())
                .map(([topicName, topicArticles]) => {
                    const topicText = topicArticles
                        .map(article => `–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${article.title}\n–¢–µ–∫—Å—Ç: ${article.content}\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è: ${article.url}`)
                        .join('\n\n---\n\n');
                    return `–¢–û–ü–Ü–ö: ${topicName}\n\n${topicText}`;
                })
                .join('\n\n==========\n\n');

            const truncatedText = organizedText.length > 15000 ? organizedText.substring(0, 15000) : organizedText;
            const topicNames = Array.from(articlesByTopic.keys()).join(', ');

            const prompt = `–¢–∏ ‚Äî –≤–µ–¥—É—á–∏–π –Ω–æ–≤–∏–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–∞—Å—Ç—É. –°—Ç–≤–æ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä—ñ–π –¥–ª—è –∞—É–¥—ñ–æ-–¥–∞–π–¥–∂–µ—Å—Ç—É –Ω–æ–≤–∏–Ω —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π.

–í–ê–ñ–õ–ò–í–û: –£ –ø–æ–¥–∫–∞—Å—Ç—ñ –û–ë–û–í'–Ø–ó–ö–û–í–û –º–∞—î –±—É—Ç–∏ –∑–≥–∞–¥–∞–Ω–∞ —Ö–æ—á–∞ –± –æ–¥–Ω–∞ –Ω–æ–≤–∏–Ω–∞ –∑ –∫–æ–∂–Ω–æ–≥–æ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–ø—ñ–∫—ñ–≤: ${topicNames}

–¢–≤—ñ–π —Ç–µ–∫—Å—Ç –º–∞—î –±—É—Ç–∏ –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º, —Ü—ñ–∫–∞–≤–∏–º —ñ –ø—Ä–∏—Ä–æ–¥–Ω–∏–º –¥–ª—è –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è.

–û–±–µ—Ä–∏ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –≥–æ–ª–æ—Å–∏ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ —ñ –¥—Ä—É–≥–æ–≥–æ —Å–ø—ñ–∫–µ—Ä–∞ (–Ω–µ –ø–æ–≤—Ç–æ—Ä—é–π—Å—è).

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∏–ø—É—Å–∫—É:
1. **–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:** –ü–æ—á–Ω–∏ –∑ —Ç–µ–ø–ª–æ–≥–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "–í—ñ—Ç–∞—é, –∑ –≤–∞–º–∏ —â–æ–¥–µ–Ω–Ω–∏–π –ø–æ–¥–∫–∞—Å—Ç –Ω–æ–≤–∏–Ω. –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–∏–≤–∏–º–æ—Å—å, —â–æ —Ü—ñ–∫–∞–≤–æ–≥–æ –≤—ñ–¥–±—É–ª–æ—Å—å —Å—å–æ–≥–æ–¥–Ω—ñ."
2. **–û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞:** –†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ –Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à—ñ –Ω–æ–≤–∏–Ω–∏ –∑ –ö–û–ñ–ù–û–ì–û —Ç–æ–ø—ñ–∫–∞. –û–±–æ–≤'—è–∑–∫–æ–≤–æ –∑–≥–∞–¥–∞–π —Ö–æ—á–∞ –± –æ–¥–Ω—É –Ω–æ–≤–∏–Ω—É –∑ –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–ø—ñ–∫–∞: ${topicNames}. –ù–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–π, –∞ –ø–µ—Ä–µ–∫–∞–∑—É–π –∫–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏ —Å–≤–æ—ó–º–∏ —Å–ª–æ–≤–∞–º–∏.
3. **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è:** –ó–∞–∫—ñ–Ω—á–∏ –ø–æ–¥–∫–∞—Å—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º –ø–æ–±–∞–∂–∞–Ω–Ω—è–º —Ç–∞ –ø–æ–¥—è–∫–æ—é –∑–∞ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è.

–Ø–∫ –º–∞—î –≤–∏–≥–ª—è–¥–∞—Ç–∏ —Å—Ü–µ–Ω–∞—Ä—ñ–π:
1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∏, —Ç–æ–Ω—É –≥–æ–ª–æ—Å—É.
2. –†–µ–ø–ª—ñ–∫–∏ —Å–ø—ñ–∫–µ—Ä–∞ 1 —ñ —Å–ø—ñ–∫–µ—Ä–∞ 2 —É —Ñ–æ—Ä–º–∞—Ç—ñ "Speaker1.name: replic"
–ü—Ä–∏–∫–ª–∞–¥:
Read aloud in a warm, welcoming tone
Speaker 1: Hello! We're excited to show you our native speech capabilities
Speaker 2: Where you can direct a voice, create realistic dialog, and so much more.

–ü–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON –±–µ–∑ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤:
{
        type: 'object',
        required: ["speaker1", "speaker2", "text"],
        properties: {
            speaker1: {
            type: 'object',
            required: ["name", "voice"],
            properties: {
                name: {
                type: 'string',
                },
                voice: {
                type: 'string',
                enum: ["Zephyr", "Puck", "Charon", "Kore", "Fenrir", "Leda", "Orus", "Aoede", "Autonoe", "Enceladus", "Sulafat", "Sadachbia", "Achird"],
                },
            },
            },
            speaker2: {
            type: 'object',
            required: ["name", "voice"],
            properties: {
                name: {
                type: 'string',
                },
                voice: {
                type: 'string',
                enum: ["Zephyr", "Puck", "Charon", "Kore", "Fenrir", "Leda", "Orus", "Aoede", "Autonoe", "Enceladus", "Sulafat", "Sadachbia", "Achird"],
                },
            },
            },
            text: {
            type: 'string',
            },
        },
}

–û—Å—å —Å—Ç–∞—Ç—Ç—ñ –¥–ª—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è, –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω—ñ –∑–∞ —Ç–æ–ø—ñ–∫–∞–º–∏:
---
${truncatedText}
---
`;

            const scriptJson = await this.geminiClient.generateText(prompt);            
            return scriptJson;
        } catch (error) {
            console.error(`‚ùå [PodcastService] Error generating podcast script:`, error);
            throw error;
        }
    }

    private generatePodcastFileName(subscriptions: ISubscription[]): string {
        // Get current date in YYYY-MM-DD format
        const now = new Date();
        const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
        
        // Get topic names from subscriptions
        const validSubscriptions = subscriptions.filter(sub => sub.topicId !== null);
        const topicNames = validSubscriptions.map(sub => {
            if (typeof sub.topicId === 'object' && sub.topicId !== null) {
                return (sub.topicId as any).name || '–Ω–µ–≤—ñ–¥–æ–º–∞-—Ç–µ–º–∞';
            }
            return '–Ω–µ–≤—ñ–¥–æ–º–∞-—Ç–µ–º–∞';
        });
        
        // Clean topic names for filename (remove special characters, spaces)
        const cleanTopicNames = topicNames.map(name => 
            name.toLowerCase()
                .replace(/[^–∞-—èa-z0-9]/g, '-')
                .replace(/-+/g, '-')
                .replace(/^-|-$/g, '')
        );
        
        // Join topics with hyphens
        const topicsStr = cleanTopicNames.join('-');
        
        // Generate filename
        const fileName = `podcast_${dateStr}_${topicsStr}.mp3`;
        
        console.log('Generated podcast filename:', fileName);
        return fileName;
    }
}
