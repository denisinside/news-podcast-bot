import { IPodcast, PodcastStatus } from '@models/Podcast';
import { IArticle } from '@models/Article';
import { ISubscription } from '@models/Subscription';
import { IPodcastRepository } from '@infrastructure/repositories/IPodcastRepository';
import { IArticleRepository } from '@infrastructure/repositories/IArticleRepository';
import { ISubscriptionRepository } from '@infrastructure/repositories/ISubscriptionRepository';
import { IFileStorageClient } from '@infrastructure/clients/IFileStorageClient';
import { Types } from 'mongoose';
import { IGeminiClient } from '@infrastructure/clients/IGeminiClient';
import ffmpeg from 'fluent-ffmpeg';
import * as ffmpegPath from '@ffmpeg-installer/ffmpeg';
import { Readable, Writable } from 'stream';
import { INotificationService } from '../interfaces/INotificationService';

ffmpeg.setFfmpegPath(ffmpegPath.path);

export class PodcastService {
    private podcastRepository: IPodcastRepository;
    private articleRepository: IArticleRepository;
    private subscriptionRepository: ISubscriptionRepository;
    private storageClient: IFileStorageClient;
    private geminiClient: IGeminiClient;
    private notificationService?: INotificationService;

    constructor(
        podcastRepository: IPodcastRepository,
        articleRepository: IArticleRepository,
        subscriptionRepository: ISubscriptionRepository,
        storageClient: IFileStorageClient,
        geminiClient: IGeminiClient
    ) {
        this.podcastRepository = podcastRepository;
        this.articleRepository = articleRepository;
        this.subscriptionRepository = subscriptionRepository;
        this.storageClient = storageClient;
        this.geminiClient = geminiClient;
    }

    setNotificationService(notificationService: INotificationService): void {
        this.notificationService = notificationService;
    }

    async generateForUser(userId: string): Promise<string> {
        try {
            console.log(`üéôÔ∏è [PodcastService] Starting podcast generation for user ${userId}`);
            
            const subscriptions = await this.subscriptionRepository.findByUserId(userId);
            console.log(`üìã [PodcastService] Found ${subscriptions.length} subscriptions for user`);
            
            if (subscriptions.length === 0) {
                throw new Error('User has no subscriptions');
            }

            const articles = await this.getArticlesForPodcast(subscriptions);
            console.log(`üì∞ [PodcastService] Found ${articles.length} articles for podcast`);

            if (articles.length === 0) {
                throw new Error('No recent articles found for user subscriptions');
            }

            console.log(`üíæ [PodcastService] Creating podcast record in database`);
            const podcast = await this.podcastRepository.create({
                userId,
                articles: articles.map(article => article._id as Types.ObjectId)
            });

            await this.podcastRepository.update(podcast._id as Types.ObjectId, {
                status: PodcastStatus.GENERATING
            });

            console.log(`üìù [PodcastService] Generating podcast script with Gemini`);
            const scriptJson = await this.generatePodcastScript(articles);
            const scriptData = JSON.parse(scriptJson);
            const { speaker1, speaker2, text } = scriptData;
            console.log(`üé≠ [PodcastService] Script generated with speakers: ${speaker1.name} (${speaker1.voice}) & ${speaker2.name} (${speaker2.voice})`);

            console.log(`üéµ [PodcastService] Generating audio with Gemini TTS`);
            const audioBuffer = await this.geminiClient.generateAudio(speaker1, speaker2, text);
            console.log(`üîä [PodcastService] Audio generated, buffer size: ${audioBuffer.length} bytes`);

            console.log(`üîÑ [PodcastService] Converting audio to MP3 format`);
            const mp3Buffer = await this.convertToMp3(audioBuffer);
            console.log(`üéß [PodcastService] MP3 conversion completed, buffer size: ${mp3Buffer.length} bytes`);

            // Generate descriptive filename
            const fileName = this.generatePodcastFileName(subscriptions);
            const fileUrl = await this.storageClient.upload(mp3Buffer, fileName);
            console.log(`üìÅ [PodcastService] File uploaded successfully: ${fileUrl}`);

            await this.podcastRepository.update(podcast._id as any, {
                status: 'READY',
                fileUrl
            });
            console.log(`‚úÖ [PodcastService] Podcast record updated with file URL`);

            // Send podcast notification to user
            if (this.notificationService) {
                try {
                    console.log(`üì§ [PodcastService] Sending podcast notification to user`);
                    // Get topic names for the podcast
                    const validSubscriptions = subscriptions.filter(sub => sub.topicId !== null);
                    const topicNames = validSubscriptions.map(sub => (sub.topicId as any).name || '–ù–µ–≤—ñ–¥–æ–º–∞ —Ç–µ–º–∞');
                    
                    const result = await this.notificationService.sendPodcastToUser(userId, fileUrl, topicNames);
                    
                    if (result.success) {
                        console.log(`‚úÖ [PodcastService] Podcast notification sent successfully to user ${userId}`);
                    } else {
                        console.warn(`‚ö†Ô∏è [PodcastService] Failed to send podcast notification to user ${userId}: ${result.error}`);
                    }
                } catch (notificationError) {
                    console.error(`‚ùå [PodcastService] Error sending podcast notification to user ${userId}:`, notificationError);
                }
            }

            console.log(`üéâ [PodcastService] Podcast generation completed successfully for user ${userId}`);
            return fileUrl;
        } catch (error) {
            console.error('Error generating podcast:', error);
            throw error;
        }
    }

    private convertToMp3(inputBuffer: Buffer): Promise<Buffer> {
        return new Promise((resolve, reject) => {
            if (!inputBuffer || inputBuffer.length === 0) {
                reject(new Error('Input buffer is empty or invalid'));
                return;
            }

            const outputBuffers: Buffer[] = [];

            const readableStream = new Readable();
            readableStream._read = () => {};
            readableStream.push(inputBuffer);
            readableStream.push(null);

            const writableStream = new Writable({
                write(chunk, encoding, callback) {
                    outputBuffers.push(chunk);
                    callback();
                }
            });

            ffmpeg(readableStream)
                .inputFormat('s16le')
                .inputOptions([
                    '-ar 24000',
                    '-ac 1'
                ])
                .audioCodec('libmp3lame')
                .audioBitrate('128k')
                .toFormat('mp3')
                .on('error', (err) => {
                    console.error('FFmpeg conversion error:', err);
                    reject(new Error(`FFmpeg error: ${err.message}`));
                })
                .on('end', () => {
                    const outputBuffer = Buffer.concat(outputBuffers);
                    resolve(outputBuffer);
                })
                .pipe(writableStream, { end: true });
        });
    }

    private async getArticlesForPodcast(subscriptions: ISubscription[]): Promise<IArticle[]> {
        // Filter out subscriptions with deleted topics
        const validSubscriptions = subscriptions.filter(sub => sub.topicId !== null);
        const topicIds = validSubscriptions.map(sub => {
            // Handle populated topicId (object) vs non-populated (ObjectId)
            if (sub.topicId && typeof sub.topicId === 'object' && (sub.topicId as any)._id) {
                return String((sub.topicId as any)._id);
            }
            return String(sub.topicId);
        }).filter(id => id !== 'null');
        
        console.log(`PodcastService: Looking for articles for ${topicIds.length} topics:`, topicIds);
        
        // Use the same approach as AdminUsersScene - get all articles and filter by topic
        const allArticles = await this.articleRepository.findAll();
        console.log(`PodcastService: Found ${allArticles.length} total articles in database`);
        
        // Filter articles by topic IDs and sort by publication date
        const filteredArticles = allArticles
            .filter(article => {
                const articleTopicId = (article as any).topicId?._id || (article as any).topicId;
                const matches = topicIds.includes(String(articleTopicId));
                if (matches) {
                    console.log(`PodcastService: Found matching article: ${article.title} (Topic: ${articleTopicId})`);
                }
                return matches;
            })
            .sort((a, b) => new Date(b.publicationDate).getTime() - new Date(a.publicationDate).getTime())
            .slice(0, 10); // Limit to 10 most recent articles
        
        console.log(`PodcastService: Filtered to ${filteredArticles.length} articles for podcast`);
        return filteredArticles;
    }

    private async generatePodcastScript(articles: IArticle[]): Promise<string> {
        const combinedText = articles
            .map(article => `–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${article.title}\n–¢–µ–∫—Å—Ç: ${article.content}\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è: ${article.url}\n`)
            .join('\n\n---\n\n');

        const truncatedText = combinedText.length > 15000 ? combinedText.substring(0, 15000) : combinedText;

        const prompt = `–¢–∏ ‚Äî –≤–µ–¥—É—á–∏–π –Ω–æ–≤–∏–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–∞—Å—Ç—É. –°—Ç–≤–æ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä—ñ–π –¥–ª—è –∞—É–¥—ñ–æ-–¥–∞–π–¥–∂–µ—Å—Ç—É –Ω–æ–≤–∏–Ω —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π.
        –¢–≤—ñ–π —Ç–µ–∫—Å—Ç –º–∞—î –±—É—Ç–∏ –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º, —Ü—ñ–∫–∞–≤–∏–º —ñ –ø—Ä–∏—Ä–æ–¥–Ω–∏–º –¥–ª—è –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è.

        –û–±–µ—Ä–∏ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –≥–æ–ª–æ—Å–∏ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ —ñ –¥—Ä—É–≥–æ–≥–æ —Å–ø—ñ–∫–µ—Ä–∞ (–Ω–µ –ø–æ–≤—Ç–æ—Ä—é–π—Å—è).

        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∏–ø—É—Å–∫—É:
        1.  **–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:** –ü–æ—á–Ω–∏ –∑ —Ç–µ–ø–ª–æ–≥–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "–í—ñ—Ç–∞—é, –∑ –≤–∞–º–∏ —â–æ–¥–µ–Ω–Ω–∏–π –ø–æ–¥–∫–∞—Å—Ç –Ω–æ–≤–∏–Ω. –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–∏–≤–∏–º–æ—Å—å, —â–æ —Ü—ñ–∫–∞–≤–æ–≥–æ –≤—ñ–¥–±—É–ª–æ—Å—å —Å—å–æ–≥–æ–¥–Ω—ñ."
        2.  **–û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞:** –†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ 2-3 –Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à—ñ —Å—Ç–∞—Ç—Ç—ñ. –ù–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–π, –∞ –ø–µ—Ä–µ–∫–∞–∑—É–π –∫–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏ —Å–≤–æ—ó–º–∏ —Å–ª–æ–≤–∞–º–∏.
        3.  **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è:** –ó–∞–∫—ñ–Ω—á–∏ –ø–æ–¥–∫–∞—Å—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º –ø–æ–±–∞–∂–∞–Ω–Ω—è–º —Ç–∞ –ø–æ–¥—è–∫–æ—é –∑–∞ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è.

        –Ø–∫ –º–∞—î –≤–∏–≥–ª—è–¥–∞—Ç–∏ —Å—Ü–µ–Ω–∞—Ä—ñ–π:
        1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∏, —Ç–æ–Ω—É –≥–æ–ª–æ—Å—É.
        2. –†–µ–ø–ª—ñ–∫–∏ —Å–ø—ñ–∫–µ—Ä–∞ 1 —ñ —Å–ø—ñ–∫–µ—Ä–∞ 2 —É —Ñ–æ—Ä–º–∞—Ç—ñ "Speaker1.name: replic"
        –ü—Ä–∏–∫–ª–∞–¥:
        Read aloud in a warm, welcoming tone
        Speaker 1: Hello! We're excited to show you our native speech capabilities
        Speaker 2: Where you can direct a voice, create realistic dialog, and so much more.

        –ü–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON –±–µ–∑ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤:
        {
                type: 'object',
                required: ["speaker1", "speaker2", "text"],
                properties: {
                    speaker1: {
                    type: 'object',
                    required: ["name", "voice"],
                    properties: {
                        name: {
                        type: 'string',
                        },
                        voice: {
                        type: 'string',
                        enum: ["Zephyr", "Puck", "Charon", "Kore", "Fenrir", "Leda", "Orus", "Aoede", "Autonoe", "Enceladus", "Sulafat", "Sadachbia", "Achird"],
                        },
                    },
                    },
                    speaker2: {
                    type: 'object',
                    required: ["name", "voice"],
                    properties: {
                        name: {
                        type: 'string',
                        },
                        voice: {
                        type: 'string',
                        enum: ["Zephyr", "Puck", "Charon", "Kore", "Fenrir", "Leda", "Orus", "Aoede", "Autonoe", "Enceladus", "Sulafat", "Sadachbia", "Achird"],
                        },
                    },
                    },
                    text: {
                    type: 'string',
                    },
                },
        }
        
        –û—Å—å —Å—Ç–∞—Ç—Ç—ñ –¥–ª—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è:
        ---
        ${truncatedText}
        ---
        `;

        return this.geminiClient.generateText(prompt);
    }

    private generatePodcastFileName(subscriptions: ISubscription[]): string {
        // Get current date in YYYY-MM-DD format
        const now = new Date();
        const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
        
        // Get topic names from subscriptions
        const validSubscriptions = subscriptions.filter(sub => sub.topicId !== null);
        const topicNames = validSubscriptions.map(sub => {
            if (typeof sub.topicId === 'object' && sub.topicId !== null) {
                return (sub.topicId as any).name || '–Ω–µ–≤—ñ–¥–æ–º–∞-—Ç–µ–º–∞';
            }
            return '–Ω–µ–≤—ñ–¥–æ–º–∞-—Ç–µ–º–∞';
        });
        
        // Clean topic names for filename (remove special characters, spaces)
        const cleanTopicNames = topicNames.map(name => 
            name.toLowerCase()
                .replace(/[^–∞-—èa-z0-9]/g, '-')
                .replace(/-+/g, '-')
                .replace(/^-|-$/g, '')
        );
        
        // Join topics with hyphens
        const topicsStr = cleanTopicNames.join('-');
        
        // Generate filename
        const fileName = `podcast_${dateStr}_${topicsStr}.mp3`;
        
        console.log('Generated podcast filename:', fileName);
        return fileName;
    }
}
