import { IScene } from "./IScene";
import { Markup, Scenes } from "telegraf";
import { IBotContext } from "../../../context/IBotContext";
import { BaseScene } from "telegraf/scenes";

export class StartScene implements IScene {
    private readonly scene: Scenes.BaseScene<IBotContext>;
    name: string = "start";

    constructor() {
        this.scene = new BaseScene<IBotContext>(this.name);
        this.registerHandlers();
    }

    getScene(): BaseScene<IBotContext> {
        return this.scene;
    }

    private registerHandlers() {
        this.scene.enter(async (ctx) => {
            await ctx.reply(
                "–ü—Ä–∏–≤—ñ—Ç! –Ø –Ω–æ–≤–∏–Ω–Ω–∏–π –ø–æ–¥–∫–∞—Å—Ç-–±–æ—Ç üéß\n" +
                "–ú–æ–∂—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ–¥–∫–∞—Å—Ç–∏ –ø–æ –æ–±—Ä–∞–Ω–∏–º —Ç–µ–º–∞–º.",
                Markup.inlineKeyboard([
                    [Markup.button.callback("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ç–µ–º–∏", "subscribe")],
                    [Markup.button.callback("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", "skip")]
                ])
            );
        });

        this.scene.action("subscribe", async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.scene.enter("subscribe");
        });

        this.scene.action("skip", async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageText("–î–æ–±—Ä–µ! –ú–æ–∂–µ—à –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –ø—ñ–∑–Ω—ñ—à–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–∏.");
            await ctx.scene.leave();
        });
    }
}
