import { IScene } from "./IScene";
import { BaseScene } from "telegraf/scenes";
import { IBotContext } from "../../../context/IBotContext";
import { Markup, Scenes } from "telegraf";
import { IUserSettingsService } from "../../../application/interfaces/IUserSettingsService";
import { NewsFrequency } from "../../../models/UserSettings";

export class SettingsScene implements IScene {
    private readonly scene: Scenes.BaseScene<IBotContext>;
    name: string = "settings";

    constructor(
        private readonly userSettingsService: IUserSettingsService
    ) {
        this.scene = new Scenes.BaseScene<IBotContext>(this.name);
        this.registerHandlers();
    }

    getScene(): BaseScene<IBotContext> {
        return this.scene;
    }

    private getFrequencyText(frequency: NewsFrequency): string {
        const frequencyMap: Record<NewsFrequency, string> = {
            [NewsFrequency.HOURLY]: "–©–æ–≥–æ–¥–∏–Ω–∏ ‚è∞",
            [NewsFrequency.EVERY_3_HOURS]: "–ö–æ–∂–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏ üïí",
            [NewsFrequency.TWICE_DAILY]: "–î–≤—ñ—á—ñ –Ω–∞ –¥–µ–Ω—å üåÖüåô",
            [NewsFrequency.DAILY]: "–†–∞–∑ –Ω–∞ –¥–µ–Ω—å üìÖ",
            [NewsFrequency.DISABLED]: "–í–∏–º–∫–Ω–µ–Ω–æ ‚è∏Ô∏è"
        };
        return frequencyMap[frequency] || frequency;
    }

    private async showMainSettings(ctx: any) {
        const userId = ctx.from!.id;
        const settings = await this.userSettingsService.getUserSettings(userId);

        if (!settings) {
            await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");
            return;
        }

        const frequencyText = this.getFrequencyText(settings.newsFrequency);
        const audioText = settings.enableAudioPodcasts ? "–£–≤—ñ–º–∫–Ω–µ–Ω–æ ‚úÖ" : "–í–∏–º–∫–Ω–µ–Ω–æ ‚ùå";

        await ctx.reply(
            "‚öôÔ∏è *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è*\n\n" +
            "*–í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:*\n\n" +
            `üì∞ *–ß–∞—Å—Ç–æ—Ç–∞ –Ω–æ–≤–∏–Ω:* ${frequencyText}\n` +
            `üéß *–ê—É–¥—ñ–æ –ø–æ–¥–∫–∞—Å—Ç–∏:* ${audioText}\n\n` +
            "–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:",
            {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback("üì∞ –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å—Ç–æ—Ç—É –Ω–æ–≤–∏–Ω", "change_frequency")],
                    [Markup.button.callback("üéß –£–≤—ñ–º–∫–Ω—É—Ç–∏/–í–∏–º–∫–Ω—É—Ç–∏ –ø–æ–¥–∫–∞—Å—Ç–∏", "toggle_audio")],
                    [Markup.button.callback("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_start")]
                ]).reply_markup
            }
        );
    }

    private registerHandlers(): void {
        this.scene.enter(async (ctx) => {
            try {
                console.log("=== SettingsScene ENTER called ===");
                await this.showMainSettings(ctx);
            } catch (error) {
                console.log("Settings scene error:", error);
                await ctx.reply(
                    "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                    Markup.inlineKeyboard([
                        [Markup.button.callback("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_start")]
                    ])
                );
            }
        });

        // Handle /start command
        this.scene.command('start', async (ctx) => {
            try {
                await ctx.reply("üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...");
                await ctx.scene.leave();
                await ctx.scene.enter("start");
            } catch (error: any) {
                console.log("Error handling /start command:", error);
                // If user blocked the bot, just leave the scene silently
                if (error.code === 403) {
                    try {
                        await ctx.scene.leave();
                    } catch (leaveError) {
                        console.log("Error leaving scene:", leaveError);
                    }
                }
            }
        });

        // Handler for changing news frequency
        this.scene.action("change_frequency", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                const userId = ctx.from!.id;
                const settings = await this.userSettingsService.getUserSettings(userId);

                await ctx.editMessageText(
                    "üì∞ *–û–±–µ—Ä—ñ—Ç—å —á–∞—Å—Ç–æ—Ç—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω:*\n\n" +
                    "–Ø–∫ —á–∞—Å—Ç–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –∑–∞ –≤–∞—à–∏–º–∏ –ø—ñ–¥–ø–∏—Å–∫–∞–º–∏?\n\n" +
                    `*–ü–æ—Ç–æ—á–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞:* ${this.getFrequencyText(settings!.newsFrequency)}`,
                    {
                        parse_mode: 'Markdown',
                        reply_markup: Markup.inlineKeyboard([
                            [Markup.button.callback("‚è∞ –©–æ–≥–æ–¥–∏–Ω–∏", `freq_${NewsFrequency.HOURLY}`)],
                            [Markup.button.callback("üïí –ö–æ–∂–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏", `freq_${NewsFrequency.EVERY_3_HOURS}`)],
                            [Markup.button.callback("üåÖüåô –î–≤—ñ—á—ñ –Ω–∞ –¥–µ–Ω—å", `freq_${NewsFrequency.TWICE_DAILY}`)],
                            [Markup.button.callback("üìÖ –†–∞–∑ –Ω–∞ –¥–µ–Ω—å", `freq_${NewsFrequency.DAILY}`)],
                            [Markup.button.callback("‚è∏Ô∏è –í–∏–º–∫–Ω—É—Ç–∏", `freq_${NewsFrequency.DISABLED}`)],
                            [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", "back_to_settings")]
                        ]).reply_markup
                    }
                );
            } catch (error) {
                console.log("Change frequency error:", error);
            }
        });

        // Handler for frequency selection
        this.scene.action(/freq_(.+)/, async (ctx) => {
            try {
                await ctx.answerCbQuery("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ");
                const frequency = ctx.match[1] as NewsFrequency;
                const userId = ctx.from!.id;

                await this.userSettingsService.updateNewsFrequency(userId, frequency);

                await ctx.editMessageText(
                    `‚úÖ *–ß–∞—Å—Ç–æ—Ç—É –Ω–æ–≤–∏–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ!*\n\n` +
                    `–í–∏ –æ–±—Ä–∞–ª–∏: *${this.getFrequencyText(frequency)}*\n\n` +
                    "–ù–æ–≤–∏–Ω–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –∑–≥—ñ–¥–Ω–æ –∑ –Ω–æ–≤–∏–º —Ä–æ–∑–∫–ª–∞–¥–æ–º.",
                    {
                        parse_mode: 'Markdown',
                        reply_markup: Markup.inlineKeyboard([
                            [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", "back_to_settings")],
                            [Markup.button.callback("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_start")]
                        ]).reply_markup
                    }
                );
            } catch (error) {
                console.log("Frequency selection error:", error);
            }
        });

        // Handler for toggling audio podcasts
        this.scene.action("toggle_audio", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                const userId = ctx.from!.id;
                const settings = await this.userSettingsService.getUserSettings(userId);

                const currentStatus = settings!.enableAudioPodcasts;

                await ctx.editMessageText(
                    "üéß *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞—É–¥—ñ–æ –ø–æ–¥–∫–∞—Å—Ç—ñ–≤*\n\n" +
                    "–ê—É–¥—ñ–æ –ø–æ–¥–∫–∞—Å—Ç–∏ - —Ü–µ –æ–∑–≤—É—á–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –Ω–æ–≤–∏–Ω, —è–∫—É –≤–∏ –º–æ–∂–µ—Ç–µ —Å–ª—É—Ö–∞—Ç–∏ –≤ –¥–æ—Ä–æ–∑—ñ –∞–±–æ –ø—ñ–¥ —á–∞—Å —ñ–Ω—à–∏—Ö —Å–ø—Ä–∞–≤.\n\n" +
                    `*–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å:* ${currentStatus ? "–£–≤—ñ–º–∫–Ω–µ–Ω–æ ‚úÖ" : "–í–∏–º–∫–Ω–µ–Ω–æ ‚ùå"}\n\n` +
                    "–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?",
                    {
                        parse_mode: 'Markdown',
                        reply_markup: Markup.inlineKeyboard([
                            [Markup.button.callback(
                                currentStatus ? "‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –ø–æ–¥–∫–∞—Å—Ç–∏" : "‚úÖ –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–æ–¥–∫–∞—Å—Ç–∏",
                                `audio_${!currentStatus}`
                            )],
                            [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", "back_to_settings")]
                        ]).reply_markup
                    }
                );
            } catch (error) {
                console.log("Toggle audio error:", error);
            }
        });

        // Handler for audio selection
        this.scene.action(/audio_(.+)/, async (ctx) => {
            try {
                const enabled = ctx.match[1] === 'true';
                await ctx.answerCbQuery(enabled ? "–ü–æ–¥–∫–∞—Å—Ç–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ ‚úÖ" : "–ü–æ–¥–∫–∞—Å—Ç–∏ –≤–∏–º–∫–Ω–µ–Ω–æ ‚ùå");
                const userId = ctx.from!.id;

                await this.userSettingsService.updateAudioPodcasts(userId, enabled);

                await ctx.editMessageText(
                    `${enabled ? '‚úÖ' : '‚ùå'} *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!*\n\n` +
                    `–ê—É–¥—ñ–æ –ø–æ–¥–∫–∞—Å—Ç–∏: *${enabled ? '–£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–í–∏–º–∫–Ω–µ–Ω–æ'}*\n\n` +
                    (enabled 
                        ? "–¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞—É–¥—ñ–æ –≤–µ—Ä—Å—ñ—ó –Ω–æ–≤–∏–Ω —Ä–∞–∑–æ–º –∑ —Ç–µ–∫—Å—Ç–æ–≤–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏. üéß"
                        : "–í–∏ –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞—É–¥—ñ–æ –≤–µ—Ä—Å—ñ—ó –Ω–æ–≤–∏–Ω. üìù"
                    ),
                    {
                        parse_mode: 'Markdown',
                        reply_markup: Markup.inlineKeyboard([
                            [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", "back_to_settings")],
                            [Markup.button.callback("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_start")]
                        ]).reply_markup
                    }
                );
            } catch (error) {
                console.log("Audio selection error:", error);
            }
        });

        // Handler for back to settings
        this.scene.action("back_to_settings", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                const userId = ctx.from!.id;
                const settings = await this.userSettingsService.getUserSettings(userId);

                if (!settings) {
                    await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å");
                    return;
                }

                const frequencyText = this.getFrequencyText(settings.newsFrequency);
                const audioText = settings.enableAudioPodcasts ? "–£–≤—ñ–º–∫–Ω–µ–Ω–æ ‚úÖ" : "–í–∏–º–∫–Ω–µ–Ω–æ ‚ùå";

                await ctx.editMessageText(
                    "‚öôÔ∏è *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è*\n\n" +
                    "*–í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:*\n\n" +
                    `üì∞ *–ß–∞—Å—Ç–æ—Ç–∞ –Ω–æ–≤–∏–Ω:* ${frequencyText}\n` +
                    `üéß *–ê—É–¥—ñ–æ –ø–æ–¥–∫–∞—Å—Ç–∏:* ${audioText}\n\n` +
                    "–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:",
                    {
                        parse_mode: 'Markdown',
                        reply_markup: Markup.inlineKeyboard([
                            [Markup.button.callback("üì∞ –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å—Ç–æ—Ç—É –Ω–æ–≤–∏–Ω", "change_frequency")],
                            [Markup.button.callback("üéß –£–≤—ñ–º–∫–Ω—É—Ç–∏/–í–∏–º–∫–Ω—É—Ç–∏ –ø–æ–¥–∫–∞—Å—Ç–∏", "toggle_audio")],
                            [Markup.button.callback("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_start")]
                        ]).reply_markup
                    }
                );
            } catch (error) {
                console.log("Back to settings error:", error);
            }
        });

        // Handler for back to start
        this.scene.action("back_to_start", async (ctx) => {
            try {
                console.log("Back to start from SettingsScene");
                await ctx.answerCbQuery("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...");
                await ctx.scene.leave();
                await ctx.scene.enter("start");
            } catch (error) {
                console.log("Back to start error:", error);
            }
        });
    }
}

