import { IScene } from "./IScene";
import { BaseScene } from "telegraf/scenes";
import { IBotContext } from "../../../context/IBotContext";
import { Markup, Scenes } from "telegraf";
import { IAdminService } from "../../../application/interfaces/IAdminService";
import { ISubscriptionService } from "../../../application/interfaces/ISubscriptionService";
import {QueueManager} from "@infrastructure/managers/QueueManager";

export class MySubscriptionsScene implements IScene {
    private readonly scene: Scenes.BaseScene<IBotContext>;
    name: string = "my_subscriptions";

    constructor(
        private readonly adminService: IAdminService,
        private readonly subscriptionService: ISubscriptionService,
    ) {
        this.scene = new Scenes.BaseScene<IBotContext>(this.name);
        this.registerHandlers();
    }

    getScene(): BaseScene<IBotContext> {
        return this.scene;
    }

    private registerHandlers(): void {
        this.scene.enter(async (ctx) => {
            try {
                const userId: string = String(ctx.from!.id);
                const subscriptions = await this.subscriptionService.getUserSubscriptions(userId);

                if (subscriptions.length === 0) {
                    await ctx.reply(
                        "üì≠ *–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫.*\n\n" +
                        "–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ—é 'üìù –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ç–µ–º–∏' —â–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ü—ñ–∫–∞–≤—ñ —Ç–µ–º–∏!",
                        {
                            parse_mode: 'Markdown',
                            reply_markup: Markup.inlineKeyboard([
                                [Markup.button.callback("üìù –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ç–µ–º–∏", "subscribe")],
                                [Markup.button.callback("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_start")]
                            ]).reply_markup
                        }
                    );
                    return;
                }

                // Filter out subscriptions with deleted topics (topicId is null)
                const validSubscriptions = subscriptions.filter(sub => sub.topicId !== null);
                
                const allTopics = await this.adminService.getAllTopics();
                const subscribedTopics = allTopics.filter(topic =>
                    validSubscriptions.some(sub => String(sub.topicId._id) === topic.id)
                );

                if (subscribedTopics.length === 0) {
                    await ctx.reply(
                        "üì≠ *–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫.*\n\n" +
                        "–ú–æ–∂–ª–∏–≤–æ, –¥–µ—è–∫—ñ —Ç–µ–º–∏ –±—É–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n" +
                        "–ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ñ —Ç–µ–º–∏, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏!",
                        {
                            parse_mode: 'Markdown',
                            reply_markup: Markup.inlineKeyboard([
                                [Markup.button.callback("üìù –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ç–µ–º–∏", "subscribe")],
                                [Markup.button.callback("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_start")]
                            ]).reply_markup
                        }
                    );
                    return;
                }

                await ctx.reply(
                    "üìã *–í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏:*\n\n" +
                    subscribedTopics.map(topic => `‚Ä¢ ${topic.name}`).join('\n') + "\n\n" +
                    "–í–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ –Ω–æ–≤–∏–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑ —Ü–∏—Ö –¥–∂–µ—Ä–µ–ª.\n\n" +
                    "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥ —è–∫–æ—ó—Å—å —Ç–µ–º–∏, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ—é '‚ùå –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è'.",
                    {
                        parse_mode: 'Markdown',
                        reply_markup: Markup.inlineKeyboard([
                            [Markup.button.callback("üìù –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —ñ–Ω—à—ñ —Ç–µ–º–∏", "subscribe")],
                            [Markup.button.callback("‚ùå –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥ —Ç–µ–º", "unsubscribe")],
                            [Markup.button.callback("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_start")]
                        ]).reply_markup
                    }
                );

            } catch (error) {
                console.log("My subscriptions scene error:", error);
                await ctx.reply(
                    "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–æ–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                    Markup.inlineKeyboard([
                        [Markup.button.callback("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_start")]
                    ])
                );
            }
        });

        this.scene.action("subscribe", async (ctx) => {
            try {
                console.log("Subscribe button clicked in MySubscriptionsScene");
                await ctx.answerCbQuery();
                await ctx.scene.enter("subscribe");
            } catch (error) {
                console.log("Subscribe action error:", error);
            }
        });

        this.scene.action("unsubscribe", async (ctx) => {
            try {
                console.log("Unsubscribe button clicked in MySubscriptionsScene");
                await ctx.answerCbQuery();
                await ctx.scene.enter("unsubscribe");
            } catch (error) {
                console.log("Unsubscribe action error:", error);
            }
        });

        this.scene.action("back_to_start", async (ctx) => {
            try {
                console.log("Back to start from MySubscriptionsScene");
                await ctx.answerCbQuery("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...");
                await ctx.scene.leave();
                await ctx.scene.enter("start");
            } catch (error) {
                console.log("Back to start error:", error);
            }
        });
    }
}

