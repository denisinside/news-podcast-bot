import { IScene } from "./IScene";
import { Markup, Scenes } from "telegraf";
import { IBotContext } from "@context/IBotContext";
import { BaseScene } from "telegraf/scenes";
import { AdvertisementService, AdvertisementPreview } from "@application/services/AdvertisementService";
import { AdminMiddleware } from "@infrastructure/middleware/AdminMiddleware";
import { AdvertisementTargetType, AdvertisementStatus } from "@models/Advertisement";

interface SessionData {
    text?: string;
    images?: string[];
    buttons?: Array<{ text: string; url: string }>;
    targetType?: AdvertisementTargetType;
    targetData?: string;
    scheduledFor?: Date;
    currentStep?: 'text' | 'images' | 'preview' | 'target' | 'schedule' | 'confirm';
}

export class AdminAdvertisementScene implements IScene {
    private readonly scene: Scenes.BaseScene<IBotContext>;
    name: string = "admin_advertisement";

    constructor(
        private readonly advertisementService: AdvertisementService,
        private readonly adminMiddleware: AdminMiddleware
    ) {
        this.scene = new BaseScene<IBotContext>(this.name);
        this.registerHandlers();
    }

    getScene(): BaseScene<IBotContext> {
        return this.scene;
    }

    private getSessionData(ctx: IBotContext): SessionData {
        return (ctx.scene as any).session || {};
    }

    private setSessionData(ctx: IBotContext, data: Partial<SessionData>): void {
        const sessionData = this.getSessionData(ctx);
        Object.assign((ctx.scene as any).session, { ...sessionData, ...data });
    }

    private registerHandlers() {
        this.scene.enter(async (ctx) => {
            // Check if user is admin
            const isAdmin = await this.adminMiddleware.isAdmin(ctx);
            if (!isAdmin) {
                await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ.");
                return ctx.scene.enter("start");
            }

            await this.showMainMenu(ctx);
        });

        // Main menu actions
        this.scene.action("create_advertisement", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                this.setSessionData(ctx, { currentStep: 'text' });
                await this.requestText(ctx);
            } catch (error) {
                console.log("Error starting advertisement creation:", error);
            }
        });

        this.scene.action("view_scheduled", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                await this.showScheduledAdvertisements(ctx);
            } catch (error) {
                console.log("Error showing scheduled advertisements:", error);
            }
        });

        this.scene.action("advertisement_stats", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                await this.showAdvertisementStats(ctx);
            } catch (error) {
                console.log("Error showing advertisement stats:", error);
            }
        });

        // Handle /start command
        this.scene.command('start', async (ctx) => {
            try {
                await ctx.reply("üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...");
                await ctx.scene.leave();
                await ctx.scene.enter("start");
            } catch (error: any) {
                console.log("Error handling /start command:", error);
                // If user blocked the bot, just leave the scene silently
                if (error.code === 403) {
                    try {
                        await ctx.scene.leave();
                    } catch (leaveError) {
                        console.log("Error leaving scene:", leaveError);
                    }
                }
            }
        });

        // Handle /menu command
        this.scene.command('menu', async (ctx) => {
            try {
                await ctx.reply("üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...");
                await ctx.scene.leave();
                await ctx.scene.enter("start");
            } catch (error) {
                console.log("Error handling /menu command:", error);
            }
        });

        // Text input handler
        this.scene.on('text', async (ctx) => {
            const sessionData = this.getSessionData(ctx);
            
            if (sessionData.currentStep === 'text') {
                const text = ctx.message.text;
                if (text.length > 4096) {
                    await ctx.reply("‚ùå –¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª—ñ–≤.");
                    return;
                }
                
                this.setSessionData(ctx, { text, currentStep: 'images' });
                await this.requestImages(ctx);
            } else if (sessionData.currentStep === 'schedule') {
                // Handle date/time input
                const dateTimeString = ctx.message.text;
                const scheduledDate = this.parseDateTime(dateTimeString);
                
                if (!scheduledDate || scheduledDate <= new Date()) {
                    await ctx.reply("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞ –∞–±–æ —á–∞—Å. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º–∞–π–±—É—Ç–Ω—é –¥–∞—Ç—É —Ç–∞ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ '–î–î.–ú–ú.–†–†–†–† –ì–ì:–•–•'.");
                    return;
                }
                
                this.setSessionData(ctx, { scheduledFor: scheduledDate, currentStep: 'confirm' });
                await this.showConfirmation(ctx);
            } else {
                // Handle unknown text messages
                const message = ctx.message.text;
                console.log(`Unknown text message in AdminAdvertisementScene: ${message}`);
                
                await ctx.reply(
                    "‚ùì *–ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è*\n\n" +
                    "–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.\n\n" +
                    "üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...",
                    { parse_mode: 'Markdown' }
                );
                
                await ctx.scene.leave();
                await ctx.scene.enter("start");
            }
        });

        // Image handling
        this.scene.on('photo', async (ctx) => {
            const sessionData = this.getSessionData(ctx);
            
            if (sessionData.currentStep === 'images') {
                const photo = ctx.message.photo[ctx.message.photo.length - 1]; // Get highest quality
                const fileId = photo.file_id;
                
                const currentImages = sessionData.images || [];
                if (currentImages.length >= 10) {
                    await ctx.reply("‚ùå –ú–∞–∫—Å–∏–º—É–º 10 –∑–æ–±—Ä–∞–∂–µ–Ω—å. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É.");
                    await this.showPreview(ctx);
                    return;
                }
                
                // Always add image (allow duplicates)
                currentImages.push(fileId);
                this.setSessionData(ctx, { images: currentImages });
                
                console.log(`Added image. Total images: ${currentImages.length}`);
                console.log(`Session images:`, currentImages);
                
                await ctx.reply(
                    `‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ (${currentImages.length}/10)\n\n` +
                    "üì∑ –î–æ–¥–∞–π—Ç–µ —â–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏'",
                    {
                        reply_markup: Markup.inlineKeyboard([
                            [Markup.button.callback("üì∑ –î–æ–¥–∞—Ç–∏ —â–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", "add_more_images")],
                            [Markup.button.callback("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", "continue_to_preview")]
                        ]).reply_markup
                    }
                );
            }
        });

        // Continue without images
        this.scene.action("skip_images", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                this.setSessionData(ctx, { images: [], currentStep: 'preview' });
                await this.showPreview(ctx);
            } catch (error) {
                console.log("Error skipping images:", error);
            }
        });

        this.scene.action("add_more_images", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                await this.requestImages(ctx);
            } catch (error) {
                console.log("Error requesting more images:", error);
            }
        });

        this.scene.action("continue_to_preview", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                this.setSessionData(ctx, { currentStep: 'preview' });
                await this.showPreview(ctx);
            } catch (error) {
                console.log("Error continuing to preview:", error);
            }
        });

        // Target selection
        this.scene.action(/^target_(.+)$/, async (ctx) => {
            try {
                await ctx.answerCbQuery();
                const targetType = ctx.match[1] as AdvertisementTargetType;
                console.log(`Selected target type: ${targetType}`);
                
                if (targetType === AdvertisementTargetType.TOPIC) {
                    // Show topic selection
                    await this.showTopicSelection(ctx);
                    return;
                }
                
                this.setSessionData(ctx, { targetType, currentStep: 'schedule' });
                
                // Show target info
                const preview = await this.advertisementService.createPreview({
                    text: this.getSessionData(ctx).text || '',
                    images: this.getSessionData(ctx).images,
                    buttons: this.getSessionData(ctx).buttons,
                    targetType: targetType
                });
                
                console.log(`Preview targetInfo: ${preview.targetInfo}`);
                console.log(`Preview recipientCount: ${preview.recipientCount}`);
                
                await ctx.reply(
                    `‚úÖ *–¶—ñ–ª—å–æ–≤–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—è –æ–±—Ä–∞–Ω–∞:*\n\n` +
                    `üìä *–ê—É–¥–∏—Ç–æ—Ä—ñ—è:* ${preview.targetInfo}\n` +
                    `üë• *–û—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤:* ${preview.recipientCount}`,
                    { parse_mode: 'Markdown' }
                );
                
                await this.requestSchedule(ctx);
            } catch (error) {
                console.log("Error selecting target:", error);
            }
        });

        // Topic selection
        this.scene.action(/^select_topic_(.+)$/, async (ctx) => {
            try {
                await ctx.answerCbQuery();
                const topicId = ctx.match[1];
                console.log(`Selected topic ID: ${topicId}`);
                this.setSessionData(ctx, { targetType: AdvertisementTargetType.TOPIC, targetData: topicId, currentStep: 'schedule' });
                
                // Show target info
                const preview = await this.advertisementService.createPreview({
                    text: this.getSessionData(ctx).text || '',
                    images: this.getSessionData(ctx).images,
                    buttons: this.getSessionData(ctx).buttons,
                    targetType: AdvertisementTargetType.TOPIC,
                    targetData: topicId
                });
                
                console.log(`Preview targetInfo: ${preview.targetInfo}`);
                console.log(`Preview recipientCount: ${preview.recipientCount}`);
                
                await ctx.reply(
                    `‚úÖ *–¶—ñ–ª—å–æ–≤–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—è –æ–±—Ä–∞–Ω–∞:*\n\n` +
                    `üìä *–ê—É–¥–∏—Ç–æ—Ä—ñ—è:* ${preview.targetInfo}\n` +
                    `üë• *–û—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤:* ${preview.recipientCount}`,
                    { parse_mode: 'Markdown' }
                );
                
                await this.requestSchedule(ctx);
            } catch (error) {
                console.log("Error selecting topic:", error);
            }
        });

        // Schedule selection
        this.scene.action("send_now", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                this.setSessionData(ctx, { scheduledFor: undefined, currentStep: 'confirm' });
                await this.showConfirmation(ctx);
            } catch (error) {
                console.log("Error selecting send now:", error);
            }
        });

        this.scene.action("schedule_later", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                this.setSessionData(ctx, { currentStep: 'schedule' });
                await this.requestScheduleTime(ctx);
            } catch (error) {
                console.log("Error selecting schedule later:", error);
            }
        });

        // Quick schedule options
        this.scene.action(/^schedule_(.+)$/, async (ctx) => {
            try {
                await ctx.answerCbQuery();
                const option = ctx.match[1];
                const scheduledFor = this.parseScheduleOption(option);
                
                if (scheduledFor) {
                    this.setSessionData(ctx, { scheduledFor, currentStep: 'confirm' });
                    await this.showConfirmation(ctx);
                } else {
                    await ctx.reply("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —á–∞—Å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                }
            } catch (error) {
                console.log("Error scheduling:", error);
            }
        });

        // Confirmation
        this.scene.action("confirm_advertisement", async (ctx) => {
            try {
                await ctx.answerCbQuery("‚è≥ –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∫–ª–∞–º–Ω–∏–π –ø–æ—Å—Ç...");
                await this.createAdvertisement(ctx);
            } catch (error) {
                console.log("Error confirming advertisement:", error);
            }
        });

        this.scene.action("cancel_advertisement", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                // Clear session
                this.setSessionData(ctx, {
                    text: undefined,
                    images: undefined,
                    buttons: undefined,
                    targetType: undefined,
                    targetData: undefined,
                    scheduledFor: undefined,
                    currentStep: undefined
                });
                await this.showMainMenu(ctx);
            } catch (error) {
                console.log("Error cancelling advertisement:", error);
            }
        });

        // Back to admin menu
        this.scene.action("back_to_admin", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                // Clear session
                this.setSessionData(ctx, {
                    text: undefined,
                    images: undefined,
                    buttons: undefined,
                    targetType: undefined,
                    targetData: undefined,
                    scheduledFor: undefined,
                    currentStep: undefined
                });
                await ctx.scene.enter("admin_menu");
            } catch (error) {
                console.log("Error going back to admin menu:", error);
            }
        });
    }

    private async showTopicSelection(ctx: IBotContext) {
        try {
            const topics = await this.advertisementService.adminService.getAllTopics();
            
            if (topics.length === 0) {
                await ctx.reply(
                    "‚ùå *–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–ø—ñ–∫—ñ–≤*\n\n" +
                    "–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å —Ç–æ–ø—ñ–∫–∏ –≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ.",
                    {
                        parse_mode: 'Markdown',
                        reply_markup: Markup.inlineKeyboard([
                            [Markup.button.callback("üîô –ù–∞–∑–∞–¥", "back_to_admin")]
                        ]).reply_markup
                    }
                );
                return;
            }
            
            const topicButtons = topics.map(topic => 
                [Markup.button.callback(`üì∞ ${topic.name}`, `select_topic_${topic._id}`)]
            );
            
            topicButtons.push([Markup.button.callback("üîô –ù–∞–∑–∞–¥", "back_to_admin")]);
            
            await ctx.reply(
                "üì∞ *–û–±–µ—Ä—ñ—Ç—å —Ç–æ–ø—ñ–∫ –¥–ª—è —Ä–µ–∫–ª–∞–º–∏:*\n\n" +
                "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–ø—ñ–∫, –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º —è–∫–æ–≥–æ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞:",
                {
                    parse_mode: 'Markdown',
                    reply_markup: Markup.inlineKeyboard(topicButtons).reply_markup
                }
            );
        } catch (error) {
            console.log("Error showing topic selection:", error);
            await ctx.reply("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–ø—ñ–∫—ñ–≤.");
        }
    }

    private async showMainMenu(ctx: IBotContext) {
        const stats = await this.advertisementService.getAdvertisementStats();
        
        await ctx.reply(
            "üì¢ *–†–µ–∫–ª–∞–º–Ω—ñ –ø–æ—Å—Ç–∏*\n\n" +
            `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
            `‚Ä¢ –í—Å—å–æ–≥–æ: ${stats.total}\n` +
            `‚Ä¢ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ: ${stats.scheduled}\n` +
            `‚Ä¢ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ: ${stats.sent}\n` +
            `‚Ä¢ –ü–æ–º–∏–ª–∫–∏: ${stats.failed}\n\n` +
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback("‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø–æ—Å—Ç", "create_advertisement")],
                    [Markup.button.callback("üìÖ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –ø–æ—Å—Ç–∏", "view_scheduled")],
                    [Markup.button.callback("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "advertisement_stats")],
                    [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", "back_to_admin")]
                ]).reply_markup
            }
        );
    }

    private async requestText(ctx: IBotContext) {
        await ctx.reply(
            "‚úçÔ∏è *–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç—É*\n\n" +
            "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:\n" +
            "‚Ä¢ *–∂–∏—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç*\n" +
            "‚Ä¢ _–∫—É—Ä—Å–∏–≤_\n" +
            "‚Ä¢ `–∫–æ–¥`\n" +
            "‚Ä¢ [–ø–æ—Å–∏–ª–∞–Ω–Ω—è](https://example.com)\n\n" +
            "–ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª—ñ–≤.",
            { 
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "cancel_advertisement")]
                ]).reply_markup
            }
        );
    }

    private async requestImages(ctx: IBotContext) {
        await ctx.reply(
            "üì∑ *–î–æ–¥–∞–π—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è*\n\n" +
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':\n" +
            "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –∑–æ–±—Ä–∞–∂–µ–Ω—å\n" +
            "‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è JPG, PNG, GIF",
            {
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", "skip_images")]
                ]).reply_markup
            }
        );
    }

    private async showPreview(ctx: IBotContext) {
        const sessionData = this.getSessionData(ctx);
        
        if (!sessionData.text) {
            await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        const preview = await this.advertisementService.createPreview({
            text: sessionData.text,
            images: sessionData.images,
            buttons: sessionData.buttons,
            targetType: AdvertisementTargetType.ALL // Default for preview
        });

        // Send preview header as separate message
        await ctx.reply("üìã *–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç—É:*", { parse_mode: 'Markdown' });

        // Send preview with images if available
        if (sessionData.images && sessionData.images.length > 0) {
            console.log(`Preview: Found ${sessionData.images.length} images:`, sessionData.images);
            try {
                if (sessionData.images.length === 1) {
                    // Send single image with text
                    await ctx.replyWithPhoto(sessionData.images[0], {
                        caption: sessionData.text,
                        parse_mode: 'Markdown'
                    });
                } else {
                    // Send multiple images as media group
                    const media = sessionData.images.map((fileId, index) => ({
                        type: 'photo' as const,
                        media: fileId,
                        caption: index === 0 ? sessionData.text : undefined
                    }));
                    await ctx.replyWithMediaGroup(media);
                }
            } catch (error) {
                console.log("Error sending preview with images:", error);
                // Fallback to text only
                await ctx.reply(sessionData.text);
            }
        } else {
            await ctx.reply(sessionData.text);
        }

        // Show preview info without target audience
        let infoMessage = "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
        infoMessage += `üì∑ *–ó–æ–±—Ä–∞–∂–µ–Ω—å:* ${sessionData.images ? sessionData.images.length : 0}\n`;
        infoMessage += `üìù *–¢–µ–∫—Å—Ç:* ${sessionData.text.length} —Å–∏–º–≤–æ–ª—ñ–≤\n`;

        await ctx.reply(infoMessage, { parse_mode: 'Markdown' });

        // Show target selection
        await ctx.reply(
            "üéØ *–û–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å–æ–≤—É –∞—É–¥–∏—Ç–æ—Ä—ñ—é:*",
            {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback("üë• –í—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º", "target_ALL")],
                    [Markup.button.callback("‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º", "target_ACTIVE")],
                    [Markup.button.callback("üì∞ –ó–∞ —Ç–æ–ø—ñ–∫–∞–º–∏", "target_TOPIC")],
                    [Markup.button.callback("üîô –ù–∞–∑–∞–¥", "back_to_admin")]
                ]).reply_markup
            }
        );
    }

    private async sendTextPreview(ctx: IBotContext, text: string, preview: AdvertisementPreview) {
        let message = "üìã <b>–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç—É:</b>\n\n";
        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
        message += `<b>${text}</b>\n`;
        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
        message += `üìä <b>–¶—ñ–ª—å–æ–≤–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—è:</b> ${preview.targetInfo}\n`;
        message += `üë• <b>–û—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤:</b> ${preview.recipientCount}\n`;
        
        if (preview.images && preview.images.length > 0) {
            message += `üì∑ <b>–ó–æ–±—Ä–∞–∂–µ–Ω—å:</b> ${preview.images.length}\n`;
        }

        await ctx.reply(message, { parse_mode: 'HTML' });
    }

    private async requestSchedule(ctx: IBotContext) {
        await ctx.reply(
            "‚è∞ *–ö–æ–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ—Å—Ç?*",
            {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback("üü¢ –ó–∞—Ä–∞–∑", "send_now")],
                    [Markup.button.callback("üïê –ß–µ—Ä–µ–∑ 1 –≥–æ–¥–∏–Ω—É", "schedule_1h")],
                    [Markup.button.callback("üïê –ß–µ—Ä–µ–∑ 3 –≥–æ–¥–∏–Ω–∏", "schedule_3h")],
                    [Markup.button.callback("üïê –ß–µ—Ä–µ–∑ 6 –≥–æ–¥–∏–Ω", "schedule_6h")],
                    [Markup.button.callback("üïê –ó–∞–≤—Ç—Ä–∞ –æ 9:00", "schedule_tomorrow_9")],
                    [Markup.button.callback("üïê –ó–∞–≤—Ç—Ä–∞ –æ 18:00", "schedule_tomorrow_18")],
                    [Markup.button.callback("üìÖ –û–±—Ä–∞—Ç–∏ –¥–∞—Ç—É —ñ —á–∞—Å", "schedule_later")],
                    [Markup.button.callback("üîô –ù–∞–∑–∞–¥", "back_to_admin")]
                ]).reply_markup
            }
        );
    }

    private async requestScheduleTime(ctx: IBotContext) {
        await ctx.reply(
            "üìÖ *–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å*\n\n" +
            "–í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n" +
            "‚Ä¢ `25.01.2024 18:00`\n" +
            "‚Ä¢ `–∑–∞–≤—Ç—Ä–∞ 15:30`\n" +
            "‚Ä¢ `—á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏`",
            { parse_mode: 'Markdown' }
        );
    }

    private parseScheduleOption(option: string): Date | null {
        const now = new Date();
        
        switch (option) {
            case '1h':
                return new Date(now.getTime() + 60 * 60 * 1000);
            case '3h':
                return new Date(now.getTime() + 3 * 60 * 60 * 1000);
            case '6h':
                return new Date(now.getTime() + 6 * 60 * 60 * 1000);
            case 'tomorrow_9':
                const tomorrow9 = new Date(now);
                tomorrow9.setDate(tomorrow9.getDate() + 1);
                tomorrow9.setHours(9, 0, 0, 0);
                return tomorrow9;
            case 'tomorrow_18':
                const tomorrow18 = new Date(now);
                tomorrow18.setDate(tomorrow18.getDate() + 1);
                tomorrow18.setHours(18, 0, 0, 0);
                return tomorrow18;
            default:
                return null;
        }
    }

    private parseDateTime(dateTimeString: string): Date | null {
        const now = new Date();
        
        // Handle different formats
        if (dateTimeString.includes('.')) {
            // Format: DD.MM.YYYY HH:MM
            const parts = dateTimeString.split(' ');
            if (parts.length !== 2) return null;
            
            const datePart = parts[0];
            const timePart = parts[1];
            
            const dateParts = datePart.split('.');
            if (dateParts.length !== 3) return null;
            
            const day = parseInt(dateParts[0]);
            const month = parseInt(dateParts[1]) - 1; // Month is 0-indexed
            const year = parseInt(dateParts[2]);
            
            const timeParts = timePart.split(':');
            if (timeParts.length !== 2) return null;
            
            const hours = parseInt(timeParts[0]);
            const minutes = parseInt(timeParts[1]);
            
            return new Date(year, month, day, hours, minutes);
        } else if (dateTimeString.includes('–∑–∞–≤—Ç—Ä–∞')) {
            // Format: –∑–∞–≤—Ç—Ä–∞ HH:MM
            const timeMatch = dateTimeString.match(/(\d{1,2}):(\d{2})/);
            if (!timeMatch) return null;
            
            const hours = parseInt(timeMatch[1]);
            const minutes = parseInt(timeMatch[2]);
            
            const tomorrow = new Date(now);
            tomorrow.setDate(tomorrow.getDate() + 1);
            tomorrow.setHours(hours, minutes, 0, 0);
            
            return tomorrow;
        } else if (dateTimeString.includes('—á–µ—Ä–µ–∑')) {
            // Format: —á–µ—Ä–µ–∑ X –≥–æ–¥–∏–Ω –∞–±–æ —á–µ—Ä–µ–∑ X —Ö–≤–∏–ª–∏–Ω
            const hoursMatch = dateTimeString.match(/—á–µ—Ä–µ–∑ (\d+) –≥–æ–¥–∏–Ω/);
            const minutesMatch = dateTimeString.match(/—á–µ—Ä–µ–∑ (\d+) —Ö–≤–∏–ª–∏–Ω/);
            
            if (hoursMatch) {
                const hours = parseInt(hoursMatch[1]);
                const future = new Date(now);
                future.setHours(future.getHours() + hours);
                return future;
            } else if (minutesMatch) {
                const minutes = parseInt(minutesMatch[1]);
                const future = new Date(now);
                future.setMinutes(future.getMinutes() + minutes);
                return future;
            }
            
            return null;
        }
        
        return null;
    }

    private async showConfirmation(ctx: IBotContext) {
        const sessionData = this.getSessionData(ctx);
        
        if (!sessionData.text || !sessionData.targetType) {
            await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.");
            return;
        }

        const preview = await this.advertisementService.createPreview({
            text: sessionData.text,
            images: sessionData.images,
            buttons: sessionData.buttons,
            targetType: sessionData.targetType,
            targetData: sessionData.targetData
        });

        // Send confirmation with images if available
        if (sessionData.images && sessionData.images.length > 0) {
            try {
                // Send first image with confirmation text
                let caption = "‚úÖ *–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç—É*\n\n";
                caption += sessionData.text + "\n\n";
                caption += `üéØ *–ê—É–¥–∏—Ç–æ—Ä—ñ—è:* ${preview.targetInfo}\n`;
                caption += `üë• *–û—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤:* ${preview.recipientCount}\n`;
                
                if (sessionData.scheduledFor) {
                    caption += `‚è∞ *–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:* ${sessionData.scheduledFor.toLocaleString('uk-UA')}\n`;
                } else {
                    caption += `‚è∞ *–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:* –ó–∞—Ä–∞–∑\n`;
                }

                if (sessionData.images.length === 1) {
                    // Send single image with confirmation text
                    await ctx.replyWithPhoto(sessionData.images[0], {
                        caption: caption,
                        parse_mode: 'Markdown'
                    });
                } else {
                    // Send multiple images as media group
                    const media = sessionData.images.map((fileId, index) => ({
                        type: 'photo' as const,
                        media: fileId,
                        caption: index === 0 ? caption : undefined
                    }));
                    await ctx.replyWithMediaGroup(media);
                }
            } catch (error) {
                console.log("Error sending confirmation with images:", error);
                // Fallback to text only
                await this.sendTextConfirmation(ctx, sessionData.text, preview, sessionData.scheduledFor);
            }
        } else {
            await this.sendTextConfirmation(ctx, sessionData.text, preview, sessionData.scheduledFor);
        }

        await ctx.reply(
            "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç—É?",
            {
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "confirm_advertisement")],
                    [Markup.button.callback("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "cancel_advertisement")]
                ]).reply_markup
            }
        );
    }

    private async sendTextConfirmation(ctx: IBotContext, text: string, preview: AdvertisementPreview, scheduledFor?: Date) {
        let message = "‚úÖ <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç—É</b>\n\n";
        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
        message += `<b>${text}</b>\n`;
        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
        message += `üéØ <b>–ê—É–¥–∏—Ç–æ—Ä—ñ—è:</b> ${preview.targetInfo}\n`;
        message += `üë• <b>–û—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤:</b> ${preview.recipientCount}\n`;
        
        if (scheduledFor) {
            message += `‚è∞ <b>–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:</b> ${scheduledFor.toLocaleString('uk-UA')}\n`;
        } else {
            message += `‚è∞ <b>–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:</b> –ó–∞—Ä–∞–∑\n`;
        }

        await ctx.reply(message, { parse_mode: 'HTML' });
    }

    private async createAdvertisement(ctx: IBotContext) {
        const sessionData = this.getSessionData(ctx);
        
        try {
            const advertisement = await this.advertisementService.createAdvertisement({
                text: sessionData.text!,
                images: sessionData.images,
                buttons: sessionData.buttons,
                targetType: sessionData.targetType!,
                targetData: sessionData.targetData,
                scheduledFor: sessionData.scheduledFor,
                createdBy: String(ctx.from?.id)
            });

            let message = "‚úÖ *–†–µ–∫–ª–∞–º–Ω–∏–π –ø–æ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ!*\n\n";
            
            if (sessionData.scheduledFor) {
                message += `üìÖ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞: ${sessionData.scheduledFor.toLocaleString('uk-UA')}\n`;
                message += "–ü–æ—Å—Ç –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π —á–∞—Å.";
            } else {
                message += "üöÄ –ü–æ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –∑–∞—Ä–∞–∑...";
                
                // Send immediately
                const result = await this.advertisementService.sendAdvertisement(String(advertisement._id));
                message += `\n\n${result.message}`;
            }

            await ctx.reply(message, { parse_mode: 'Markdown' });
            
            // Clear session and return to main menu
            this.setSessionData(ctx, {
                text: undefined,
                images: undefined,
                buttons: undefined,
                targetType: undefined,
                targetData: undefined,
                scheduledFor: undefined,
                currentStep: undefined
            });
            await this.showMainMenu(ctx);

        } catch (error) {
            console.log("Error creating advertisement:", error);
            await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç—É.");
        }
    }

    private async showScheduledAdvertisements(ctx: IBotContext) {
        try {
            const scheduled = await this.advertisementService.getScheduledAdvertisements();
            console.log(`Found ${scheduled.length} scheduled advertisements:`, scheduled.map(s => ({ id: s._id, scheduledFor: s.scheduledFor, status: s.status })));
            
            if (scheduled.length === 0) {
            await ctx.reply(
                "üìÖ *–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –ø–æ—Å—Ç–∏*\n\n" +
                "–ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤.",
                {
                    parse_mode: 'Markdown',
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback("üîô –ù–∞–∑–∞–¥", "back_to_admin")]
                    ]).reply_markup
                }
            );
            return;
        }

        let message = "üìÖ *–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –ø–æ—Å—Ç–∏*\n\n";
        
        for (let i = 0; i < Math.min(scheduled.length, 5); i++) {
            const ad = scheduled[i];
            message += `${i + 1}. ${ad.text.substring(0, 50)}...\n`;
            message += `   üìÖ ${ad.scheduledFor?.toLocaleString('uk-UA')}\n\n`;
        }

        if (scheduled.length > 5) {
            message += `... —Ç–∞ —â–µ ${scheduled.length - 5} –ø–æ—Å—Ç—ñ–≤`;
        }

        await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: Markup.inlineKeyboard([
                [Markup.button.callback("üîô –ù–∞–∑–∞–¥", "back_to_admin")]
            ]).reply_markup
        });
        } catch (error) {
            console.log("Error showing scheduled advertisements:", error);
            await ctx.reply("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤.");
        }
    }

    private async showAdvertisementStats(ctx: IBotContext) {
        const stats = await this.advertisementService.getAdvertisementStats();
        
        await ctx.reply(
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤*\n\n" +
            `üìà *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
            `‚Ä¢ –í—Å—å–æ–≥–æ –ø–æ—Å—Ç—ñ–≤: ${stats.total}\n` +
            `‚Ä¢ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ: ${stats.scheduled}\n` +
            `‚Ä¢ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ: ${stats.sent}\n` +
            `‚Ä¢ –ü–æ–º–∏–ª–∫–∏: ${stats.failed}\n\n` +
            `üìä *–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å:* ${stats.total > 0 ? Math.round((stats.sent / stats.total) * 100) : 0}%`,
            {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback("üîô –ù–∞–∑–∞–¥", "back_to_admin")]
                ]).reply_markup
            }
        );
    }
}
