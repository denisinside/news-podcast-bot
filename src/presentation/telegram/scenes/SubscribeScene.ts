import { IScene } from "./IScene";
import { BaseScene } from "telegraf/scenes";
import { IBotContext } from "../../../context/IBotContext";
import { Markup, Scenes } from "telegraf";
import { ITopic } from "../../../models";
import { IAdminService } from "../../../application/interfaces/IAdminService";
import { ISubscriptionService } from "../../../application/interfaces/ISubscriptionService";
import {Types} from "mongoose";

export class SubscribeScene implements IScene{
    private readonly scene: Scenes.BaseScene<IBotContext>;
    name: string = "subscribe";

    constructor(
        private readonly adminService: IAdminService,
        private readonly subscriptionService: ISubscriptionService
    ) {
        this.scene = new Scenes.BaseScene<IBotContext>(this.name);
        this.registerHandlers();
    }

    getScene(): BaseScene<IBotContext> {
        return this.scene;
    }


    private registerHandlers(): void {
        this.scene.enter(async (ctx) => {
            try {
                const allTopics: ITopic[] = await this.adminService.getAllTopics();

                if (allTopics.length === 0) {
                    await ctx.reply(
                        "‚ùå *–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–µ–º –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏.*\n\n" +
                        "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —â–µ –Ω–µ –¥–æ–¥–∞–≤ –∂–æ–¥–Ω–æ—ó —Ç–µ–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
                        {
                            parse_mode: 'Markdown',
                            reply_markup: Markup.inlineKeyboard([
                                [Markup.button.callback("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_menu")]
                            ]).reply_markup
                        }
                    );
                    return;
                }

                // Get user's current subscriptions
                const userSubscriptions = await this.subscriptionService.getUserSubscriptions(String(ctx.from!.id));
                const subscribedTopicIds = userSubscriptions.map(sub => String(sub.topicId._id));

                // Filter out topics user is already subscribed to
                const availableTopics = allTopics.filter(topic => !subscribedTopicIds.includes(topic.id));

                // Check if user is subscribed to all topics
                if (availableTopics.length === 0) {
                    await ctx.reply(
                        "üéâ *–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–µ–º–∏!*\n\n" +
                        "*üìã –í–∞—à—ñ –ø—ñ–¥–ø–∏—Å–∫–∏:*\n" +
                        allTopics.map(topic => `‚Ä¢ ${topic.name}`).join('\n') + "\n\n" +
                        "–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ –Ω–æ–≤–∏–Ω–∏ –∑ —É—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª.",
                        {
                            parse_mode: 'Markdown',
                            reply_markup: Markup.inlineKeyboard([
                                [Markup.button.callback("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_menu")]
                            ]).reply_markup
                        }
                    );
                    return;
                }

                const buttons = availableTopics.map((topic) =>
                    [Markup.button.callback(`üì∞ ${topic.name}`, topic.id)]
                );

                buttons.push([Markup.button.callback("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_menu")]);

                let messageText = "üìù *–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ–º–∏ –Ω–æ–≤–∏–Ω*\n\n" +
                    "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º–∏, —è–∫—ñ –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å. –í–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ –Ω–æ–≤–∏–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!\n\n" +
                    "*üí° –ü–æ—Ä–∞–¥–∞:* –ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—è –Ω–∞ 3-5 —Ç–µ–º –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É.\n\n";

                // Show current subscriptions if any
                if (userSubscriptions.length > 0) {
                    const subscribedTopics = allTopics.filter(topic => subscribedTopicIds.includes(topic.id));
                    if (subscribedTopics.length !== 0)
                    messageText += "*‚úÖ –í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞:*\n" +
                        subscribedTopics.map(topic => `‚Ä¢ ${topic.name}`).join('\n') + "\n\n";
                }

                messageText += "*üì∞ –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–µ–º–∏ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏:*";

                await ctx.reply(
                    messageText,
                    {
                        parse_mode: 'Markdown',
                        reply_markup: Markup.inlineKeyboard(buttons).reply_markup
                    }
                );
            } catch (error) {
                console.log("Subscribe scene error:", error);
                await ctx.reply(
                    "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–µ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                    Markup.inlineKeyboard([
                        [Markup.button.callback("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_menu")]
                    ])
                );
            }
        });

        this.scene.action(/.*/, async (ctx) => {
            try {
                const topicId = ctx.match[0];
                console.log("=== SubscribeScene action triggered ===");
                console.log("Action data:", topicId);
                console.log("Current scene:", ctx.scene?.session?.current);

                // Check if it's back to menu button
                if (topicId === "back_to_menu") {
                    console.log("Back to menu button clicked - redirecting to start scene");
                    await ctx.answerCbQuery("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...");
                    await ctx.scene.leave();
                    await ctx.scene.enter("start");
                    return;
                }

                // Check if it's back to start button
                if (topicId === "back_to_start") {
                    console.log("=== BACK TO START BUTTON CLICKED ===");
                    console.log("Current scene:", ctx.scene?.session?.current);
                    try {
                        await ctx.answerCbQuery("–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...");
                        await ctx.scene.leave();
                        console.log("Left current scene");
                        console.log("Attempting to enter start scene");
                        await ctx.scene.enter("start");
                        console.log("Successfully entered start scene");
                    } catch (error) {
                        console.log("Error with back to start:", error);
                    }
                    return;
                }

                // Check if it's subscribe again button
                if (topicId === "subscribe") {
                    await ctx.answerCbQuery();
                    await ctx.scene.enter("subscribe");
                    return;
                }

                await this.subscriptionService.subscribe(String(ctx.from!.id), new Types.ObjectId(topicId));
                await ctx.answerCbQuery("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ü—é —Ç–µ–º—É!");

                // Get updated subscriptions to show in message
                let subscriptionsText = "";
                try {
                    const subscriptions = await this.subscriptionService.getUserSubscriptions(String(ctx.from!.id));
                    const allTopics = await this.adminService.getAllTopics();
                    const subscribedTopics = allTopics.filter(topic =>
                        subscriptions.some(sub => sub.topicId === topic.id)
                    );

                    if (subscribedTopics.length > 0) {
                        subscriptionsText = "\n\n*üìã –í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏:*\n" +
                            subscribedTopics.map(topic => `‚Ä¢ ${topic.name}`).join('\n');
                    }
                } catch (error) {
                    console.log("Error getting subscriptions for message:", error);
                }

                await ctx.editMessageText(
                    "‚úÖ *–í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ü—é —Ç–µ–º—É!*\n\n" +
                    "–¢–µ–ø–µ—Ä –≤–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ –Ω–æ–≤–∏–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ." +
                    subscriptionsText + "\n\n" +
                    "–ú–æ–∂–µ—Ç–µ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —ñ–Ω—à—ñ —Ç–µ–º–∏ –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                    {
                        parse_mode: 'Markdown',
                        reply_markup: Markup.inlineKeyboard([
                            [Markup.button.callback("üìù –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —ñ–Ω—à—ñ —Ç–µ–º–∏", "subscribe")],
                            [Markup.button.callback("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "back_to_start")]
                        ]).reply_markup
                    }
                );
                // Don't leave scene - stay in subscribe scene to handle button clicks
            } catch (error) {
                console.log("Subscription error:", error);
                try {
                    await ctx.answerCbQuery("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏");
                    await ctx.editMessageText("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–ø–∏—Å—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
                    // Stay in scene to allow user to try again or go back
                } catch (fallbackError) {
                    console.log("Fallback error:", fallbackError);
                }
            }
        });
    }

}