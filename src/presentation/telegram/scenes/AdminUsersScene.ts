import { IScene } from "./IScene";
import { Markup, Scenes } from "telegraf";
import { IBotContext } from "@context/IBotContext";
import { BaseScene } from "telegraf/scenes";
import { IAdminService } from "@application/interfaces/IAdminService";
import { AdminMiddleware } from "@infrastructure/middleware/AdminMiddleware";
import { UserRole } from "@models/User";

interface SessionData {
    action?: 'view' | 'block' | 'unblock' | 'set_admin' | 'remove_admin';
    userId?: string;
    page?: number;
}

export class AdminUsersScene implements IScene {
    private readonly scene: Scenes.BaseScene<IBotContext>;
    name: string = "admin_users";
    private readonly USERS_PER_PAGE = 10;

    constructor(
        private readonly adminService: IAdminService,
        private readonly adminMiddleware: AdminMiddleware
    ) {
        this.scene = new BaseScene<IBotContext>(this.name);
        this.registerHandlers();
    }

    getScene(): BaseScene<IBotContext> {
        return this.scene;
    }

    private getSessionData(ctx: IBotContext): SessionData {
        if (!ctx.scene.session) {
            (ctx.scene as any).session = {};
        }
        if (!(ctx.scene.session as any).adminUsers) {
            (ctx.scene.session as any).adminUsers = { page: 0 };
        }
        return (ctx.scene.session as any).adminUsers;
    }

    private registerHandlers() {
        this.scene.enter(async (ctx) => {
            const isAdmin = await this.adminMiddleware.isAdmin(ctx);
            if (!isAdmin) {
                await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.");
                return ctx.scene.enter("start");
            }

            const sessionData = this.getSessionData(ctx);
            sessionData.page = 0;

            await this.showUsersList(ctx);
        });

        this.scene.action(/^user_details_(.+)$/, async (ctx) => {
            try {
                await ctx.answerCbQuery();
                const userId = ctx.match[1];
                await this.showUserDetails(ctx, userId);
            } catch (error) {
                console.log("Error showing user details:", error);
            }
        });

        this.scene.action(/^block_user_(.+)$/, async (ctx) => {
            try {
                await ctx.answerCbQuery();
                const userId = ctx.match[1];

                const result = await this.adminService.blockUser(userId);
                
                if (result) {
                    await ctx.reply("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!");
                } else {
                    await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
                }

                await this.showUserDetails(ctx, userId);
            } catch (error) {
                console.log("Error blocking user:", error);
                await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
            }
        });

        this.scene.action(/^unblock_user_(.+)$/, async (ctx) => {
            try {
                await ctx.answerCbQuery();
                const userId = ctx.match[1];

                const result = await this.adminService.unblockUser(userId);
                
                if (result) {
                    await ctx.reply("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ!");
                } else {
                    await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
                }

                await this.showUserDetails(ctx, userId);
            } catch (error) {
                console.log("Error unblocking user:", error);
                await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
            }
        });

        this.scene.action(/^set_admin_(.+)$/, async (ctx) => {
            try {
                await ctx.answerCbQuery();
                const userId = ctx.match[1];

                const result = await this.adminService.setUserRole(userId, UserRole.ADMIN);
                
                if (result) {
                    await ctx.reply("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥–∞–Ω–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!");
                } else {
                    await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥–∞–Ω–Ω—ñ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
                }

                await this.showUserDetails(ctx, userId);
            } catch (error) {
                console.log("Error setting admin role:", error);
                await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥–∞–Ω–Ω—ñ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
            }
        });

        this.scene.action(/^remove_admin_(.+)$/, async (ctx) => {
            try {
                await ctx.answerCbQuery();
                const userId = ctx.match[1];

                const result = await this.adminService.setUserRole(userId, UserRole.USER);
                
                if (result) {
                    await ctx.reply("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∏–¥–∞–ª–µ–Ω–æ!");
                } else {
                    await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
                }

                await this.showUserDetails(ctx, userId);
            } catch (error) {
                console.log("Error removing admin role:", error);
                await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
            }
        });

        this.scene.action("next_page", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                const sessionData = this.getSessionData(ctx);
                sessionData.page = (sessionData.page || 0) + 1;
                await this.showUsersList(ctx);
            } catch (error) {
                console.log("Error navigating to next page:", error);
            }
        });

        this.scene.action("prev_page", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                const sessionData = this.getSessionData(ctx);
                sessionData.page = Math.max((sessionData.page || 0) - 1, 0);
                await this.showUsersList(ctx);
            } catch (error) {
                console.log("Error navigating to previous page:", error);
            }
        });

        this.scene.action("back_to_users", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                await this.showUsersList(ctx);
            } catch (error) {
                console.log("Error returning to users list:", error);
            }
        });

        this.scene.action("back_to_admin", async (ctx) => {
            try {
                await ctx.answerCbQuery();
                await ctx.scene.enter("admin_menu");
            } catch (error) {
                console.log("Error returning to admin menu:", error);
            }
        });
    }

    private async showUsersList(ctx: IBotContext) {
        try {
            const sessionData = this.getSessionData(ctx);
            const page = sessionData.page || 0;

            const allUsers = await this.adminService.getAllUsers();
            const totalPages = Math.ceil(allUsers.length / this.USERS_PER_PAGE);
            const start = page * this.USERS_PER_PAGE;
            const end = start + this.USERS_PER_PAGE;
            const users = allUsers.slice(start, end);

            if (allUsers.length === 0) {
                await ctx.reply(
                    "üë• *–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏*\n\n" +
                    "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —â–µ –Ω–µ–º–∞—î.",
                    {
                        parse_mode: 'Markdown',
                        reply_markup: Markup.inlineKeyboard([
                            [Markup.button.callback("üîô –ù–∞–∑–∞–¥", "back_to_admin")]
                        ]).reply_markup
                    }
                );
                return;
            }

            let message = `üë• *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ* (–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${page + 1}/${totalPages})\n\n`;
            
            users.forEach((user, index) => {
                const userNum = start + index + 1;
                const roleIcon = user.role === UserRole.ADMIN ? 'üëë' : 'üë§';
                const statusIcon = user.isBlocked ? 'üö´' : '‚úÖ';
                message += `${userNum}. ${roleIcon} ${user.username || '–ë–µ–∑ —ñ–º–µ–Ω—ñ'} ${statusIcon}\n`;
                message += `   ID: \`${user._id}\`\n\n`;
            });

            const buttons = users.map(user => [
                Markup.button.callback(
                    `üëÅÔ∏è ${user.username || '–ë–µ–∑ —ñ–º–µ–Ω—ñ'}`, 
                    `user_details_${user._id}`
                )
            ]);

            // Pagination buttons
            const navButtons = [];
            if (page > 0) {
                navButtons.push(Markup.button.callback("‚óÄÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", "prev_page"));
            }
            if (page < totalPages - 1) {
                navButtons.push(Markup.button.callback("–ù–∞—Å—Ç—É–ø–Ω–∞ ‚ñ∂Ô∏è", "next_page"));
            }
            if (navButtons.length > 0) {
                buttons.push(navButtons);
            }

            buttons.push([Markup.button.callback("üîô –ù–∞–∑–∞–¥", "back_to_admin")]);

            await ctx.reply(message, {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard(buttons).reply_markup
            });
        } catch (error) {
            console.log("Error showing users list:", error);
            await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.");
        }
    }

    private async showUserDetails(ctx: IBotContext, userId: string) {
        try {
            const user = await this.adminService.getUserById(userId);
            
            if (!user) {
                await ctx.reply("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
                return;
            }

            const roleIcon = user.role === UserRole.ADMIN ? 'üëë' : 'üë§';
            const statusIcon = user.isBlocked ? 'üö´' : '‚úÖ';
            
            const message = 
                `${roleIcon} *–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞*\n\n` +
                `*ID:* \`${user._id}\`\n` +
                `*–Ü–º'—è:* ${user.username || '–ë–µ–∑ —ñ–º–µ–Ω—ñ'}\n` +
                `*–†–æ–ª—å:* ${user.role === UserRole.ADMIN ? '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä üëë' : '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á üë§'}\n` +
                `*–°—Ç–∞—Ç—É—Å:* ${user.isBlocked ? '–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π üö´' : '–ê–∫—Ç–∏–≤–Ω–∏–π ‚úÖ'}\n` +
                `*–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:* ${new Date(user.createdAt).toLocaleDateString('uk-UA')}`;

            const buttons = [];

            // Block/Unblock button
            if (user.isBlocked) {
                buttons.push([Markup.button.callback("‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏", `unblock_user_${userId}`)]);
            } else {
                buttons.push([Markup.button.callback("üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", `block_user_${userId}`)]);
            }

            // Admin role toggle
            if (user.role === UserRole.ADMIN) {
                buttons.push([Markup.button.callback("üë§ –ó–Ω—è—Ç–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω–∞", `remove_admin_${userId}`)]);
            } else {
                buttons.push([Markup.button.callback("üëë –ó—Ä–æ–±–∏—Ç–∏ –∞–¥–º—ñ–Ω–æ–º", `set_admin_${userId}`)]);
            }

            buttons.push([Markup.button.callback("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", "back_to_users")]);

            await ctx.reply(message, {
                parse_mode: 'Markdown',
                reply_markup: Markup.inlineKeyboard(buttons).reply_markup
            });
        } catch (error) {
            console.log("Error showing user details:", error);
            await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
        }
    }
}

